Î
®D:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\ProjectGeneration\ProjectGenerationFlag.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{		 
[

 
Flags

 
]

 
public 
enum !
ProjectGenerationFlag "
{ 
None 
= 
$num	 

,
 
Embedded 

= 
$num 
, 
Local 
= 	
$num
 
, 
Registry 

= 
$num 
, 
Git 
= 
$num 	
,	 

BuiltIn 	
=
 
$num 
, 
Unknown 	
=
 
$num 
, 
PlayerAssemblies 
= 
$num 
, 
LocalTarBall 
= 
$num 
, 
} 
} ¿e
òD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\VisualStudioIntegration.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
[ 
InitializeOnLoad 
] 
internal 	
class
 #
VisualStudioIntegration '
{ 
private 	
static
 
Messager 
	_messager #
;# $
private 	
static
 
readonly 
Queue 
<  
Message  '
>' (
Incoming) 1
=2 3
new4 7
Queue8 =
<= >
Message> E
>E F
(F G
)G H
;H I
private 	
static
 
readonly 
object  
IncomingLock! -
=. /
new0 3
object4 :
(: ;
); <
;< =
static #
VisualStudioIntegration	  
(  !
)! "
{ 
if 
( 
! 
VisualStudioEditor 
. 
	IsEnabled $
)$ %
return 

;
 
RunOnceOnUpdate 
( 
( 
) 
=> 
{ 
var## 
messagingPort## 
=## 
MessagingPort## %
(##% &
)##& '
;##' (
try%% 
{&& 
	_messager'' 
='' 
Messager'' 
.'' 
BindTo''  
(''  !
messagingPort''! .
)''. /
;''/ 0
	_messager(( 
.(( 
ReceiveMessage(( 
+=((  
ReceiveMessage((! /
;((/ 0
})) 
catch** 	
(**
 
SocketException** 
)** 
{++ 
Debug-- 

.--
 

LogWarning-- 
(-- 
$"-- #
Unable to use UDP port -- /
{--/ 0
messagingPort--0 =
}--= >ï
á for VS/Unity messaging. You should check if another process is already bound to this port or if your firewall settings are compatible.	--> ≈
"
--≈ ∆
)
--∆ «
;
--« »
}.. 
RunOnShutdown00 
(00 
Shutdown00 
)00 
;00 
}11 
)11 
;11 
EditorApplication33 
.33 
update33 
+=33 
OnUpdate33 '
;33' (
}44 
private66 	
static66
 
void66 
RunOnceOnUpdate66 %
(66% &
Action66& ,
action66- 3
)663 4
{77 
var88 
callback88 
=88 
null88 
as88 
EditorApplication88 +
.88+ ,
CallbackFunction88, <
;88< =
callback:: 
=:: 
(:: 
):: 
=>:: 
{;; 
EditorApplication<< 
.<< 
update<< 
-=<< 
callback<<  (
;<<( )
action== 

(==
 
)== 
;== 
}>> 
;>> 
EditorApplication@@ 
.@@ 
update@@ 
+=@@ 
callback@@ '
;@@' (
}AA 
privateCC 	
staticCC
 
voidCC 
RunOnShutdownCC #
(CC# $
ActionCC$ *
actionCC+ 1
)CC1 2
{DD 
ifFF 
(FF 
!FF 
VisualStudioEditorFF 
.FF 
	IsWindowsFF $
)FF$ %
returnGG 

;GG
 
	AppDomainII 
.II 
CurrentDomainII 
.II 
DomainUnloadII '
+=II( *
(II+ ,
_II, -
,II- .
__II/ 1
)II1 2
=>II3 5
actionII6 <
(II< =
)II= >
;II> ?
}JJ 
privateLL 	
staticLL
 
intLL 
DebuggingPortLL "
(LL" #
)LL# $
{MM 
returnNN 	
$numNN
 
+NN 
(NN 
SystemNN 
.NN 
DiagnosticsNN %
.NN% &
ProcessNN& -
.NN- .
GetCurrentProcessNN. ?
(NN? @
)NN@ A
.NNA B
IdNNB D
%NNE F
$numNNG K
)NNK L
;NNL M
}OO 
privateQQ 	
staticQQ
 
intQQ 
MessagingPortQQ "
(QQ" #
)QQ# $
{RR 
returnSS 	
DebuggingPortSS
 
(SS 
)SS 
+SS 
$numSS 
;SS 
}TT 
privateVV 	
staticVV
 
voidVV 
ReceiveMessageVV $
(VV$ %
objectVV% +
senderVV, 2
,VV2 3
MessageEventArgsVV4 D
argsVVE I
)VVI J
{WW 
	OnMessageXX 
(XX 
argsXX 
.XX 
MessageXX 
)XX 
;XX 
}YY 
private[[ 	
static[[
 
void[[ 
OnUpdate[[ 
([[ 
)[[  
{\\ 
lock]] 
(]] 	
IncomingLock]]	 
)]] 
{^^ 
while__ 	
(__
 
Incoming__ 
.__ 
Count__ 
>__ 
$num__ 
)__ 
{`` 
ProcessIncomingaa 
(aa 
Incomingaa 
.aa 
Dequeueaa %
(aa% &
)aa& '
)aa' (
;aa( )
}bb 
}cc 
}dd 
privateff 	
staticff
 
voidff 

AddMessageff  
(ff  !
Messageff! (
messageff) 0
)ff0 1
{gg 
lockhh 
(hh 	
IncomingLockhh	 
)hh 
{ii 
Incomingjj 
.jj 
Enqueuejj 
(jj 
messagejj 
)jj 
;jj 
}kk 
}ll 
privatenn 	
staticnn
 
voidnn 
ProcessIncomingnn %
(nn% &
Messagenn& -
messagenn. 5
)nn5 6
{oo 
switchpp 	
(pp
 
messagepp 
.pp 
Typepp 
)pp 
{qq 
caserr 
MessageTyperr	 
.rr 
Pingrr 
:rr 
Answerss 
(ss 
messagess 
,ss 
MessageTypess  
.ss  !
Pongss! %
)ss% &
;ss& '
breaktt 

;tt
 
caseuu 
MessageTypeuu	 
.uu 
Playuu 
:uu 
Shutdownvv 
(vv 
)vv 
;vv 
EditorApplicationww 
.ww 
	isPlayingww  
=ww! "
trueww# '
;ww' (
breakxx 

;xx
 
caseyy 
MessageTypeyy	 
.yy 
Stopyy 
:yy 
EditorApplicationzz 
.zz 
	isPlayingzz  
=zz! "
falsezz# (
;zz( )
break{{ 

;{{
 
case|| 
MessageType||	 
.|| 
Pause|| 
:|| 
EditorApplication}} 
.}} 
isPaused}} 
=}}  !
true}}" &
;}}& '
break~~ 

;~~
 
case 
MessageType	 
. 
Unpause 
: 
EditorApplication
ÄÄ 
.
ÄÄ 
isPaused
ÄÄ 
=
ÄÄ  !
false
ÄÄ" '
;
ÄÄ' (
break
ÅÅ 

;
ÅÅ
 
case
ÇÇ 
MessageType
ÇÇ	 
.
ÇÇ 
Build
ÇÇ 
:
ÇÇ 
break
ÑÑ 

;
ÑÑ
 
case
ÖÖ 
MessageType
ÖÖ	 
.
ÖÖ 
Refresh
ÖÖ 
:
ÖÖ 
Refresh
ÜÜ 
(
ÜÜ 
)
ÜÜ 
;
ÜÜ 
break
áá 

;
áá
 
case
àà 
MessageType
àà	 
.
àà 
Version
àà 
:
àà 
Answer
ââ 
(
ââ 
message
ââ 
,
ââ 
MessageType
ââ  
.
ââ  !
Version
ââ! (
,
ââ( )
PackageVersion
ââ* 8
(
ââ8 9
)
ââ9 :
)
ââ: ;
;
ââ; <
break
ää 

;
ää
 
case
ãã 
MessageType
ãã	 
.
ãã 
UpdatePackage
ãã "
:
ãã" #
break
çç 

;
çç
 
case
éé 
MessageType
éé	 
.
éé 
ProjectPath
éé  
:
éé  !
Answer
èè 
(
èè 
message
èè 
,
èè 
MessageType
èè  
.
èè  !
ProjectPath
èè! ,
,
èè, -
Path
èè. 2
.
èè2 3
GetFullPath
èè3 >
(
èè> ?
Path
èè? C
.
èèC D
Combine
èèD K
(
èèK L
Application
èèL W
.
èèW X
dataPath
èèX `
,
èè` a
$str
èèb f
)
èèf g
)
èèg h
)
èèh i
;
èèi j
break
êê 

;
êê
 
}
ëë 
}
íí 
internal
îî 

static
îî 
string
îî 
PackageVersion
îî '
(
îî' (
)
îî( )
{
ïï 
var
ññ 
package
ññ 
=
ññ 
UnityEditor
ññ 
.
ññ 
PackageManager
ññ +
.
ññ+ ,
PackageInfo
ññ, 7
.
ññ7 8
FindForAssembly
ññ8 G
(
ññG H
typeof
ññH N
(
ññN O%
VisualStudioIntegration
ññO f
)
ññf g
.
ññg h
Assembly
ññh p
)
ññp q
;
ññq r
return
óó 	
package
óó
 
.
óó 
version
óó 
;
óó 
}
òò 
private
öö 	
static
öö
 
void
öö 
Refresh
öö 
(
öö 
)
öö 
{
õõ 
if
ùù 
(
ùù 
!
ùù 
EditorPrefs
ùù 
.
ùù 
GetBool
ùù 
(
ùù 
$str
ùù *
,
ùù* +
true
ùù, 0
)
ùù0 1
)
ùù1 2
return
ûû 

;
ûû
 
RunOnceOnUpdate
†† 
(
†† 
AssetDatabase
††  
.
††  !
Refresh
††! (
)
††( )
;
††) *
}
°° 
private
££ 	
static
££
 
void
££ 
	OnMessage
££ 
(
££  
Message
££  '
message
££( /
)
££/ 0
{
§§ 

AddMessage
•• 
(
•• 
message
•• 
)
•• 
;
•• 
}
¶¶ 
private
®® 	
static
®®
 
void
®® 
Answer
®® 
(
®® 
Message
®® $
message
®®% ,
,
®®, -
MessageType
®®. 9

answerType
®®: D
,
®®D E
string
®®F L
answerValue
®®M X
=
®®Y Z
$str
®®[ ]
)
®®] ^
{
©© 
var
™™ 
targetEndPoint
™™ 
=
™™ 
message
™™ 
.
™™  
Origin
™™  &
;
™™& '
Answer
¨¨ 	
(
¨¨	 

targetEndPoint
≠≠ 
,
≠≠ 

answerType
ÆÆ 
,
ÆÆ 
answerValue
ØØ 
)
ØØ 
;
ØØ 
}
∞∞ 
private
≤≤ 	
static
≤≤
 
void
≤≤ 
Answer
≤≤ 
(
≤≤ 

IPEndPoint
≤≤ '
targetEndPoint
≤≤( 6
,
≤≤6 7
MessageType
≤≤8 C

answerType
≤≤D N
,
≤≤N O
string
≤≤P V
answerValue
≤≤W b
)
≤≤b c
{
≥≥ 
	_messager
¥¥ 
?
¥¥ 
.
¥¥ 
SendMessage
¥¥ 
(
¥¥ 
targetEndPoint
¥¥ (
,
¥¥( )

answerType
¥¥* 4
,
¥¥4 5
answerValue
¥¥6 A
)
¥¥A B
;
¥¥B C
}
µµ 
private
∑∑ 	
static
∑∑
 
void
∑∑ 
Shutdown
∑∑ 
(
∑∑ 
)
∑∑  
{
∏∏ 
if
ππ 
(
ππ 
	_messager
ππ 
==
ππ 
null
ππ 
)
ππ 
return
∫∫ 

;
∫∫
 
	_messager
ºº 
.
ºº 
ReceiveMessage
ºº 
-=
ºº 
ReceiveMessage
ºº -
;
ºº- .
	_messager
ΩΩ 
.
ΩΩ 
Dispose
ΩΩ 
(
ΩΩ 
)
ΩΩ 
;
ΩΩ 
	_messager
ææ 
=
ææ 
null
ææ 
;
ææ 
}
øø 
}
¿¿ 
}¡¡ À
ùD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\ExceptionEventArgs.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
.- .
	Messaging. 7
{ 
internal		 	
class		
 
ExceptionEventArgs		 "
{

 
public 
	Exception	 
	Exception 
{ 
get "
;" #
}$ %
public 
ExceptionEventArgs	 
( 
	Exception %
	exception& /
)/ 0
{ 
	Exception 
= 
	exception 
; 
} 
} 
} Í
îD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\UdpSocket.cs
	namespace		 	
	Microsoft		
 
.		 
Unity		 
.		 
VisualStudio		 &
.		& '
Editor		' -
.		- .
	Messaging		. 7
{

 
internal 	
class
 
	UdpSocket 
: 
Socket "
{ 
public 
const	 
int 

BufferSize 
= 
$num  $
*% &
$num' (
;( )
internal 

	UdpSocket 
( 
) 
: 
base 	
(	 

AddressFamily
 
. 
InterNetwork $
,$ %

SocketType& 0
.0 1
Dgram1 6
,6 7
ProtocolType8 D
.D E
UdpE H
)H I
{ 
SetIOControl 
( 
) 
; 
} 
public 
void	 
Bind 
( 
	IPAddress 
address $
,$ %
int& )
port* .
=/ 0
$num1 2
)2 3
{ 
Bind 
( 
new 

IPEndPoint 
( 
address 
?? !
	IPAddress" +
.+ ,
Any, /
,/ 0
port1 5
)5 6
)6 7
;7 8
} 
private 	
void
 
SetIOControl 
( 
) 
{ 
if 
( 
! 
VisualStudioEditor 
. 
	IsWindows $
)$ %
return 

;
 
try 
{   
const!! 	
int!!
 
SIO_UDP_CONNRESET!! 
=!!  !
-!!" #
$num!!# -
;!!- .
	IOControl## 
(## 
SIO_UDP_CONNRESET## 
,##  
new##! $
byte##% )
[##) *
]##* +
{##, -
$num##. /
}##0 1
,##1 2
new##3 6
byte##7 ;
[##; <
$num##< =
]##= >
)##> ?
;##? @
}$$ 
catch%% 
{&& 
}(( 
})) 
public++ 
static++	 
byte++ 
[++ 
]++ 
	BufferFor++  
(++  !
IAsyncResult++! -
result++. 4
)++4 5
{,, 
return-- 	
(--
 
byte-- 
[-- 
]-- 
)-- 
result-- 
.-- 

AsyncState-- #
;--# $
}.. 
public00 
static00	 
EndPoint00 
Any00 
(00 
)00 
{11 
return22 	
new22
 

IPEndPoint22 
(22 
	IPAddress22 "
.22" #
Any22# &
,22& '
$num22( )
)22) *
;22* +
}33 
}44 
}55 ’X
ôD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\VisualStudioInstallation.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
internal 	
	interface
 %
IVisualStudioInstallation -
{ 
string 
Path	 
{ 
get 
; 
} 
bool 
SupportsAnalyzers 
{ 
get 
; 
}  !
bool 
SupportsCSharp8 
{ 
get 
; 
} 
string 
[ 	
]	 

GetAnalyzers 
( 
) 
; 

CodeEditor 
. 
Installation $
ToCodeEditorInstallation 2
(2 3
)3 4
;4 5
} 
internal 	
class
 $
VisualStudioInstallation (
:) *%
IVisualStudioInstallation+ D
{ 
public 
string	 
Name 
{ 
get 
; 
set 
;  
}! "
public 
string	 
Path 
{ 
get 
; 
set 
;  
}! "
public 
Version	 
Version 
{ 
get 
; 
set  #
;# $
}% &
public 
bool	 
IsPrerelease 
{ 
get  
;  !
set" %
;% &
}' (
public 
bool	 
SupportsAnalyzers 
{ 
get 
{   
if!! 
(!! 
VisualStudioEditor!! 
.!! 
	IsWindows!! $
)!!$ %
return"" 
Version"" 
>="" 
new"" 
Version"" "
(""" #
$num""# %
,""% &
$num""' (
)""( )
;"") *
if$$ 
($$ 
VisualStudioEditor$$ 
.$$ 
IsOSX$$  
)$$  !
return%% 
Version%% 
>=%% 
new%% 
Version%% "
(%%" #
$num%%# $
,%%$ %
$num%%& '
)%%' (
;%%( )
return'' 

false'' 
;'' 
}(( 
})) 
public++ 
bool++	 
SupportsCSharp8++ 
{,, 
get-- 
{.. 
if// 
(// 
VisualStudioEditor// 
.// 
	IsWindows// $
)//$ %
return00 
Version00 
>=00 
new00 
Version00 "
(00" #
$num00# %
,00% &
$num00' (
)00( )
;00) *
if22 
(22 
VisualStudioEditor22 
.22 
IsOSX22  
)22  !
return33 
Version33 
>=33 
new33 
Version33 "
(33" #
$num33# $
,33$ %
$num33& '
)33' (
;33( )
return55 

false55 
;55 
}66 
}77 
private99 	
static99
 
string99 
ReadRegistry99 $
(99$ %
RegistryKey99% 0
hive991 5
,995 6
string997 =
keyName99> E
,99E F
string99G M
	valueName99N W
)99W X
{:: 
try;; 
{<< 
var== 
unitykey== 
=== 
hive== 
.== 

OpenSubKey== "
(==" #
keyName==# *
)==* +
;==+ ,
var?? 
result?? 
=?? 
(?? 
string?? 
)?? 
unitykey?? !
???! "
.??" #
GetValue??# +
(??+ ,
	valueName??, 5
)??5 6
;??6 7
return@@ 

result@@ 
;@@ 
}AA 
catchBB 
(BB	 

	ExceptionBB
 
)BB 
{CC 
returnDD 

nullDD 
;DD 
}EE 
}FF 
privateII 	
stringII
 
GetBridgeLocationII "
(II" #
)II# $
{JJ 
ifKK 
(KK 
VisualStudioEditorKK 
.KK 
	IsWindowsKK #
)KK# $
{LL 
varNN 
keyNameNN 
=NN 
$"NN 9
-Software\\Microsoft\\Microsoft Visual Studio NN A
{NNA B
VersionNNB I
.NNI J
MajorNNJ O
}NNO P
.0 Tools for UnityNNP b
"NNb c
;NNc d
constOO 	
stringOO
 
	valueNameOO 
=OO 
$strOO 1
;OO1 2
varQQ 
bridgeQQ 
=QQ 
ReadRegistryQQ 
(QQ 
RegistryQQ &
.QQ& '
CurrentUserQQ' 2
,QQ2 3
keyNameQQ4 ;
,QQ; <
	valueNameQQ= F
)QQF G
;QQG H
ifRR 
(RR 
stringRR 
.RR 
IsNullOrEmptyRR 
(RR 
bridgeRR #
)RR# $
)RR$ %
bridgeSS 
=SS 
ReadRegistrySS 
(SS 
RegistrySS #
.SS# $
LocalMachineSS$ 0
,SS0 1
keyNameSS2 9
,SS9 :
	valueNameSS; D
)SSD E
;SSE F
returnUU 

bridgeUU 
;UU 
}VV 
ifXX 
(XX 
VisualStudioEditorXX 
.XX 
IsOSXXX 
)XX  
{YY 
var[[ 
bridge[[ 
=[[ 
Environment[[ 
.[[ "
GetEnvironmentVariable[[ 3
([[3 4
$str[[4 B
)[[B C
;[[C D
if\\ 
(\\ 
!\\ 	
string\\	 
.\\ 
IsNullOrEmpty\\ 
(\\ 
bridge\\ $
)\\$ %
&&\\& (
File\\) -
.\\- .
Exists\\. 4
(\\4 5
bridge\\5 ;
)\\; <
)\\< =
return]] 
bridge]] 
;]] 
const__ 	
string__
 
addinBridge__ 
=__ 
$str__ P
;__P Q
const`` 	
string``
 
	addinName`` 
=`` 
$str`` 0
;``0 1
varcc 
localAddinscc 
=cc 
IOPathcc 
.cc 
Combinecc $
(cc$ %
Environmentdd 
.dd 
GetFolderPathdd 
(dd 
Environmentdd *
.dd* +
SpecialFolderdd+ 8
.dd8 9
Personaldd9 A
)ddA B
,ddB C
$"ee 6
*Library/Application Support/VisualStudio/$ee 1
{ee1 2
Versionee2 9
.ee9 :
Majoree: ?
}ee? @
.0ee@ B
"eeB C
+eeD E
$streeF \
)ee\ ]
;ee] ^
ifjj 
(jj 
	Directoryjj 
.jj 
Existsjj 
(jj 
localAddinsjj $
)jj$ %
)jj% &
{kk 
foreachll 
(ll 
varll 
folderll 
inll 
	Directoryll %
.ll% &
GetDirectoriesll& 4
(ll4 5
localAddinsll5 @
,ll@ A
	addinNamellB K
+llL M
$strllN Q
,llQ R
SearchOptionllS _
.ll_ `
TopDirectoryOnlyll` p
)llp q
)llq r
{mm 
bridgenn 
=nn 
IOPathnn 
.nn 
Combinenn 
(nn 
foldernn $
,nn$ %
addinBridgenn& 1
)nn1 2
;nn2 3
ifoo 
(oo	 

Fileoo
 
.oo 
Existsoo 
(oo 
bridgeoo 
)oo 
)oo 
returnpp 
bridgepp 
;pp 
}qq 
}rr 
bridgevv 

=vv 
IOPathvv 
.vv 
Combinevv 
(vv 
Pathvv  
,vv  !
$"vv" $6
*Contents/Resources/lib/monodevelop/AddIns/vv$ N
{vvN O
	addinNamevvO X
}vvX Y
/vvY Z
{vvZ [
addinBridgevv[ f
}vvf g
"vvg h
)vvh i
;vvi j
ifww 
(ww 
Fileww 
.ww 
Existsww 
(ww 
bridgeww 
)ww 
)ww 
returnxx 
bridgexx 
;xx 
}yy 
return{{ 	
null{{
 
;{{ 
}|| 
public~~ 
string~~	 
[~~ 
]~~ 
GetAnalyzers~~ 
(~~ 
)~~  
{ 
var
ÄÄ 
bridge
ÄÄ 
=
ÄÄ 
GetBridgeLocation
ÄÄ !
(
ÄÄ! "
)
ÄÄ" #
;
ÄÄ# $
if
ÇÇ 
(
ÇÇ 
!
ÇÇ 
string
ÇÇ 
.
ÇÇ 
IsNullOrEmpty
ÇÇ 
(
ÇÇ 
bridge
ÇÇ #
)
ÇÇ# $
)
ÇÇ$ %
{
ÉÉ 
var
ÑÑ 
baseLocation
ÑÑ 
=
ÑÑ 
IOPath
ÑÑ 
.
ÑÑ 
Combine
ÑÑ %
(
ÑÑ% &
IOPath
ÑÑ& ,
.
ÑÑ, -
GetDirectoryName
ÑÑ- =
(
ÑÑ= >
bridge
ÑÑ> D
)
ÑÑD E
,
ÑÑE F
$str
ÑÑG K
)
ÑÑK L
;
ÑÑL M
var
ÖÖ 
analyzerLocation
ÖÖ 
=
ÖÖ 
IOPath
ÖÖ !
.
ÖÖ! "
GetFullPath
ÖÖ" -
(
ÖÖ- .
IOPath
ÖÖ. 4
.
ÖÖ4 5
Combine
ÖÖ5 <
(
ÖÖ< =
baseLocation
ÖÖ= I
,
ÖÖI J
$str
ÖÖK V
)
ÖÖV W
)
ÖÖW X
;
ÖÖX Y
if
áá 
(
áá 
	Directory
áá 
.
áá 
Exists
áá 
(
áá 
analyzerLocation
áá )
)
áá) *
)
áá* +
return
àà 
	Directory
àà 
.
àà 
GetFiles
àà 
(
àà 
analyzerLocation
àà /
,
àà/ 0
$str
àà1 A
,
ààA B
SearchOption
ààC O
.
ààO P
AllDirectories
ààP ^
)
àà^ _
;
àà_ `
}
ââ 
return
çç 	
Array
çç
 
.
çç 
Empty
çç 
<
çç 
string
çç 
>
çç 
(
çç 
)
çç 
;
çç  
}
éé 
public
êê 

CodeEditor
êê	 
.
êê 
Installation
êê  &
ToCodeEditorInstallation
êê! 9
(
êê9 :
)
êê: ;
{
ëë 
return
íí 	
new
íí
 

CodeEditor
íí 
.
íí 
Installation
íí %
(
íí% &
)
íí& '
{
íí( )
Name
íí* .
=
íí/ 0
Name
íí1 5
,
íí5 6
Path
íí7 ;
=
íí< =
Path
íí> B
}
ííC D
;
ííD E
}
ìì 
}
îî 
}ïï „
àD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Symbols.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{		 
internal

 	
static


 
class

 
Symbols

 
{ 
public 
static	 
bool  
IsPortableSymbolFile )
() *
string* 0
pdbFile1 8
)8 9
{ 
try 
{ 
using 	
(
 
var 
stream 
= 
File 
. 
OpenRead %
(% &
pdbFile& -
)- .
). /
{ 
return 
stream 
. 
ReadByte 
( 
) 
==  
$char! $
&&	 
stream 
. 
ReadByte 
( 
) 
==  
$char! $
&&	 
stream 
. 
ReadByte 
( 
) 
==  
$char! $
&&	 
stream 
. 
ReadByte 
( 
) 
==  
$char! $
;$ %
} 
} 
catch 
(	 

	Exception
 
) 
{ 
return 

false 
; 
} 
} 
} 
} à
ìD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\SolutionProperties.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
internal		 	
class		
 
SolutionProperties		 "
{

 
public 
string	 
Name 
{ 
get 
; 
set 
;  
}! "
public 
IList	 
< 
KeyValuePair 
< 
string "
," #
string$ *
>* +
>+ ,
Entries- 4
{5 6
get7 :
;: ;
set< ?
;? @
}A B
public 
string	 
Type 
{ 
get 
; 
set 
;  
}! "
} 
} ≤
çD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\AssemblyInfo.cs
[ 
assembly 	
:	 

InternalsVisibleTo
 
( 
$str =
)= >
]> ?
[ 
assembly 	
:	 

InternalsVisibleTo 
( 
$str 8
)8 9
]9 :‰=
èD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\SolutionParser.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{		 
internal

 	
static


 
class

 
SolutionParser

 %
{ 
private 	
static
 
readonly 
Regex 
ProjectDeclaration  2
=3 4
new5 8
Regex9 >
(> ?
$str	? ﬂ
,
ﬂ ‡
RegexOptions
· Ì
.
Ì Ó

Singleline
Ó ¯
|
˘ ˙
RegexOptions
˚ á
.
á à
ExplicitCapture
à ó
)
ó ò
;
ò ô
private 	
static
 
readonly 
Regex !
PropertiesDeclaration  5
=6 7
new8 ;
Regex< A
(A B
$str	B ¬
,
¬ √
RegexOptions
ƒ –
.
– —

Singleline
— €
|
‹ ›
RegexOptions
ﬁ Í
.
Í Î
ExplicitCapture
Î ˙
)
˙ ˚
;
˚ ¸
private 	
static
 
readonly 
Regex &
PropertiesEntryDeclaration  :
=; <
new= @
RegexA F
(F G
$strG h
,h i
RegexOptionsj v
.v w
	Multiline	w Ä
|
Å Ç
RegexOptions
É è
.
è ê
ExplicitCapture
ê ü
)
ü †
;
† °
public 
static	 
Solution 
ParseSolutionFile *
(* +
string+ 1
filename2 :
,: ;
IFileIO< C
fileIOD J
)J K
{ 
return 	 
ParseSolutionContent
 
( 
fileIO %
.% &
ReadAllText& 1
(1 2
filename2 :
): ;
); <
;< =
} 
public 
static	 
Solution  
ParseSolutionContent -
(- .
string. 4
content5 <
)< =
{ 
return 	
new
 
Solution 
{ 
Projects 
= !
ParseSolutionProjects $
($ %
content% ,
), -
,- .

Properties 
= #
ParseSolutionProperties (
(( )
content) 0
)0 1
} 
; 
} 
private 	
static
  
SolutionProjectEntry %
[% &
]& '!
ParseSolutionProjects( =
(= >
string> D
contentE L
)L M
{   
var!! 
projects!! 
=!! 
new!! 
List!! 
<!!  
SolutionProjectEntry!! /
>!!/ 0
(!!0 1
)!!1 2
;!!2 3
var"" 
mc"" 	
=""
 
ProjectDeclaration"" 
."" 
Matches"" &
(""& '
content""' .
)"". /
;""/ 0
foreach$$ 

($$ 
Match$$ 
match$$ 
in$$ 
mc$$ 
)$$ 
{%% 
projects&& 
.&& 
Add&& 
(&& 
new&&  
SolutionProjectEntry&& )
{'' 
ProjectFactoryGuid(( 
=(( 
match(( 
.((  
Groups((  &
[((& '
$str((' ;
]((; <
.((< =
Value((= B
,((B C
Name)) 	
=))
 
match)) 
.)) 
Groups)) 
[)) 
$str)) 
]))  
.))  !
Value))! &
,))& '
FileName** 
=** 
match** 
.** 
Groups** 
[** 
$str** '
]**' (
.**( )
Value**) .
,**. /
ProjectGuid++ 
=++ 
match++ 
.++ 
Groups++ 
[++  
$str++  -
]++- .
.++. /
Value++/ 4
,++4 5
Metadata,, 
=,, 
match,, 
.,, 
Groups,, 
[,, 
$str,, '
],,' (
.,,( )
Value,,) .
}-- 
)-- 
;-- 
}.. 
return00 	
projects00
 
.00 
ToArray00 
(00 
)00 
;00 
}11 
private33 	
static33
 
SolutionProperties33 #
[33# $
]33$ %#
ParseSolutionProperties33& =
(33= >
string33> D
content33E L
)33L M
{44 
var55 

properties55 
=55 
new55 
List55 
<55 
SolutionProperties55 /
>55/ 0
(550 1
)551 2
;552 3
var66 
mc66 	
=66
 !
PropertiesDeclaration66 !
.66! "
Matches66" )
(66) *
content66* 1
)661 2
;662 3
foreach88 

(88 
Match88 
match88 
in88 
mc88 
)88 
{99 
var:: 
sp:: 

=:: 
new:: 
SolutionProperties:: #
{;; 
Entries<< 
=<< 
new<< 
List<< 
<<< 
KeyValuePair<< $
<<<$ %
string<<% +
,<<+ ,
string<<- 3
><<3 4
><<4 5
(<<5 6
)<<6 7
,<<7 8
Name== 	
===
 
match== 
.== 
Groups== 
[== 
$str== 
]==  
.==  !
Value==! &
,==& '
Type>> 	
=>>
 
match>> 
.>> 
Groups>> 
[>> 
$str>> 
]>>  
.>>  !
Value>>! &
}?? 
;?? 
varAA 
entriesAA 
=AA 
matchAA 
.AA 
GroupsAA 
[AA 
$strAA (
]AA( )
.AA) *
ValueAA* /
;AA/ 0
varBB 
mecBB 
=BB &
PropertiesEntryDeclarationBB (
.BB( )
MatchesBB) 0
(BB0 1
entriesBB1 8
)BB8 9
;BB9 :
foreachCC 
(CC 
MatchCC 
entryCC 
inCC 
mecCC 
)CC  
{DD 
varEE 
keyEE	 
=EE 
entryEE 
.EE 
GroupsEE 
[EE 
$strEE !
]EE! "
.EE" #
ValueEE# (
.EE( )
TrimEE) -
(EE- .
)EE. /
;EE/ 0
varFF 
valueFF	 
=FF 
entryFF 
.FF 
GroupsFF 
[FF 
$strFF %
]FF% &
.FF& '
ValueFF' ,
.FF, -
TrimFF- 1
(FF1 2
)FF2 3
;FF3 4
spGG 
.GG 
EntriesGG 
.GG 
AddGG 
(GG 
newGG 
KeyValuePairGG $
<GG$ %
stringGG% +
,GG+ ,
stringGG- 3
>GG3 4
(GG4 5
keyGG5 8
,GG8 9
valueGG: ?
)GG? @
)GG@ A
;GGA B
}HH 

propertiesJJ 
.JJ 
AddJJ 
(JJ 
spJJ 
)JJ 
;JJ 
}KK 
returnMM 	

propertiesMM
 
.MM 
ToArrayMM 
(MM 
)MM 
;MM 
}NN 
}OO 
}PP ∑e
îD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\Messenger.cs
	namespace		 	
	Microsoft		
 
.		 
Unity		 
.		 
VisualStudio		 &
.		& '
Editor		' -
.		- .
	Messaging		. 7
{

 
internal 	
class
 
Messager 
: 
IDisposable &
{ 
public 
event	 
EventHandler 
< 
MessageEventArgs ,
>, -
ReceiveMessage. <
;< =
public 
event	 
EventHandler 
< 
ExceptionEventArgs .
>. /
MessagerException0 A
;A B
private 	
readonly
 
	UdpSocket 
_socket $
;$ %
private 	
readonly
 
object 
_disposeLock &
=' (
new) ,
object- 3
(3 4
)4 5
;5 6
private 	
bool
 
	_disposed 
; 
	protected 
Messager 
( 
int 
port 
) 
{ 
_socket 

= 
new 
	UdpSocket 
( 
) 
; 
_socket 

.
 
SetSocketOption 
( 
SocketOptionLevel ,
., -
Socket- 3
,3 4
SocketOptionName5 E
.E F
ExclusiveAddressUseF Y
,Y Z
false[ `
)` a
;a b
_socket 

.
 
SetSocketOption 
( 
SocketOptionLevel ,
., -
Socket- 3
,3 4
SocketOptionName5 E
.E F
ReuseAddressF R
,R S
trueT X
)X Y
;Y Z
_socket 

.
 
Bind 
( 
	IPAddress 
. 
Any 
, 
port #
)# $
;$ %
BeginReceiveMessage 
( 
) 
; 
} 
private 	
void
 
BeginReceiveMessage "
(" #
)# $
{ 
var   
buffer   
=   
new   
byte   
[   
	UdpSocket   "
.  " #

BufferSize  # -
]  - .
;  . /
var!! 
any!! 

=!! 
	UdpSocket!! 
.!! 
Any!! 
(!! 
)!! 
;!! 
try## 
{$$ 
lock%% 
(%%	 

_disposeLock%%
 
)%% 
{&& 
if'' 
('' 	
	_disposed''	 
)'' 
return(( 
;(( 
_socket** 
.** 
BeginReceiveFrom** 
(** 
buffer** $
,**$ %
$num**& '
,**' (
buffer**) /
.**/ 0
Length**0 6
,**6 7
SocketFlags**8 C
.**C D
None**D H
,**H I
ref**J M
any**N Q
,**Q R"
ReceiveMessageCallback**S i
,**i j
buffer**k q
)**q r
;**r s
}++ 
},, 
catch-- 
(--	 

SocketException--
 
se-- 
)-- 
{.. 
MessagerException// 
?// 
.// 
Invoke// 
(// 
this// "
,//" #
new//$ '
ExceptionEventArgs//( :
(//: ;
se//; =
)//= >
)//> ?
;//? @
BeginReceiveMessage11 
(11 
)11 
;11 
}22 
catch33 
(33	 
#
ObjectDisposedException33
 !
)33! "
{44 
}55 
}66 
private88 	
void88
 "
ReceiveMessageCallback88 %
(88% &
IAsyncResult88& 2
result883 9
)889 :
{99 
try:: 
{;; 
var<< 
endPoint<< 
=<< 
	UdpSocket<< 
.<< 
Any<<  
(<<  !
)<<! "
;<<" #
lock>> 
(>>	 

_disposeLock>>
 
)>> 
{?? 
if@@ 
(@@ 	
	_disposed@@	 
)@@ 
returnAA 
;AA 
_socketCC 
.CC 
EndReceiveFromCC 
(CC 
resultCC "
,CC" #
refCC$ '
endPointCC( 0
)CC0 1
;CC1 2
}DD 
varFF 
messageFF 
=FF 
DeserializeMessageFF $
(FF$ %
	UdpSocketFF% .
.FF. /
	BufferForFF/ 8
(FF8 9
resultFF9 ?
)FF? @
)FF@ A
;FFA B
ifGG 
(GG 
messageGG 
!=GG 
nullGG 
)GG 
{HH 
messageII 
.II 
OriginII 
=II 
(II 

IPEndPointII !
)II! "
endPointII" *
;II* +
ReceiveMessageJJ 
?JJ 
.JJ 
InvokeJJ 
(JJ 
thisJJ  
,JJ  !
newJJ" %
MessageEventArgsJJ& 6
(JJ6 7
messageJJ7 >
)JJ> ?
)JJ? @
;JJ@ A
}KK 
}LL 
catchMM 
(MM	 
#
ObjectDisposedExceptionMM
 !
)MM! "
{NN 
returnOO 

;OO
 
}PP 
catchQQ 
(QQ	 

	ExceptionQQ
 
eQQ 
)QQ 
{RR "
RaiseMessagerExceptionSS 
(SS 
eSS 
)SS 
;SS 
}TT 
BeginReceiveMessageVV 
(VV 
)VV 
;VV 
}WW 
privateYY 	
voidYY
 "
RaiseMessagerExceptionYY %
(YY% &
	ExceptionYY& /
eYY0 1
)YY1 2
{ZZ 
MessagerException[[ 
?[[ 
.[[ 
Invoke[[ 
([[ 
this[[ !
,[[! "
new[[# &
ExceptionEventArgs[[' 9
([[9 :
e[[: ;
)[[; <
)[[< =
;[[= >
}\\ 
private^^ 	
static^^
 
Message^^ 

MessageFor^^ #
(^^# $
MessageType^^$ /
type^^0 4
,^^4 5
string^^6 <
value^^= B
)^^B C
{__ 
return`` 	
new``
 
Message`` 
{`` 
Type`` 
=`` 
type`` #
,``# $
Value``% *
=``+ ,
value``- 2
}``3 4
;``4 5
}aa 
publiccc 
voidcc	 
SendMessagecc 
(cc 

IPEndPointcc $
targetcc% +
,cc+ ,
MessageTypecc- 8
typecc9 =
,cc= >
stringcc? E
valueccF K
=ccL M
$strccN P
)ccP Q
{dd 
varee 
messageee 
=ee 

MessageForee 
(ee 
typeee  
,ee  !
valueee" '
)ee' (
;ee( )
varff 
bufferff 
=ff 
SerializeMessageff  
(ff  !
messageff! (
)ff( )
;ff) *
tryhh 
{ii 
lockjj 
(jj	 

_disposeLockjj
 
)jj 
{kk 
ifll 
(ll 	
	_disposedll	 
)ll 
returnmm 
;mm 
_socketoo 
.oo 
BeginSendTooo 
(oo 
bufferoo 
,oo  
$numoo! "
,oo" #
Mathoo$ (
.oo( )
Minoo) ,
(oo, -
bufferoo- 3
.oo3 4
Lengthoo4 :
,oo: ;
	UdpSocketoo< E
.ooE F

BufferSizeooF P
)ooP Q
,ooQ R
SocketFlagsooS ^
.oo^ _
Noneoo_ c
,ooc d
targetooe k
,ook l 
SendMessageCallback	oom Ä
,
ooÄ Å
null
ooÇ Ü
)
ooÜ á
;
ooá à
}pp 
}qq 
catchrr 
(rr	 

SocketExceptionrr
 
serr 
)rr 
{ss 
MessagerExceptiontt 
?tt 
.tt 
Invokett 
(tt 
thistt "
,tt" #
newtt$ '
ExceptionEventArgstt( :
(tt: ;
sett; =
)tt= >
)tt> ?
;tt? @
}uu 
}vv 
privatexx 	
voidxx
 
SendMessageCallbackxx "
(xx" #
IAsyncResultxx# /
resultxx0 6
)xx6 7
{yy 
tryzz 
{{{ 
lock|| 
(||	 

_disposeLock||
 
)|| 
{}} 
if~~ 
(~~ 	
	_disposed~~	 
)~~ 
return 
; 
_socket
ÅÅ 
.
ÅÅ 
	EndSendTo
ÅÅ 
(
ÅÅ 
result
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
}
ÉÉ 
catch
ÑÑ 
(
ÑÑ	 

SocketException
ÑÑ
 
se
ÑÑ 
)
ÑÑ 
{
ÖÖ 
MessagerException
ÜÜ 
?
ÜÜ 
.
ÜÜ 
Invoke
ÜÜ 
(
ÜÜ 
this
ÜÜ "
,
ÜÜ" #
new
ÜÜ$ ' 
ExceptionEventArgs
ÜÜ( :
(
ÜÜ: ;
se
ÜÜ; =
)
ÜÜ= >
)
ÜÜ> ?
;
ÜÜ? @
}
áá 
catch
àà 
(
àà	 
%
ObjectDisposedException
àà
 !
)
àà! "
{
ââ 
}
ää 
}
ãã 
private
çç 	
static
çç
 
byte
çç 
[
çç 
]
çç 
SerializeMessage
çç (
(
çç( )
Message
çç) 0
message
çç1 8
)
çç8 9
{
éé 
var
èè 

serializer
èè 
=
èè 
new
èè 

Serializer
èè "
(
èè" #
)
èè# $
;
èè$ %

serializer
êê 
.
êê 

WriteInt32
êê 
(
êê 
(
êê 
int
êê 
)
êê 
message
êê %
.
êê% &
Type
êê& *
)
êê* +
;
êê+ ,

serializer
ëë 
.
ëë 
WriteString
ëë 
(
ëë 
message
ëë !
.
ëë! "
Value
ëë" '
)
ëë' (
;
ëë( )
return
ìì 	

serializer
ìì
 
.
ìì 
Buffer
ìì 
(
ìì 
)
ìì 
;
ìì 
}
îî 
private
ññ 	
static
ññ
 
Message
ññ  
DeserializeMessage
ññ +
(
ññ+ ,
byte
ññ, 0
[
ññ0 1
]
ññ1 2
buffer
ññ3 9
)
ññ9 :
{
óó 
if
òò 
(
òò 
buffer
òò 
.
òò 
Length
òò 
<
òò 
$num
òò 
)
òò 
return
ôô 

null
ôô 
;
ôô 
var
õõ 
deserializer
õõ 
=
õõ 
new
õõ 
Deserializer
õõ &
(
õõ& '
buffer
õõ' -
)
õõ- .
;
õõ. /
var
úú 
type
úú 
=
úú 
(
úú 
MessageType
úú 
)
úú 
deserializer
úú '
.
úú' (
	ReadInt32
úú( 1
(
úú1 2
)
úú2 3
;
úú3 4
var
ùù 
value
ùù 
=
ùù 
deserializer
ùù 
.
ùù 

ReadString
ùù &
(
ùù& '
)
ùù' (
;
ùù( )
return
üü 	
new
üü
 
Message
üü 
{
üü 
Type
üü 
=
üü 
type
üü #
,
üü# $
Value
üü% *
=
üü+ ,
value
üü- 2
}
üü3 4
;
üü4 5
}
†† 
public
¢¢ 
static
¢¢	 
Messager
¢¢ 
BindTo
¢¢ 
(
¢¢  
int
¢¢  #
port
¢¢$ (
)
¢¢( )
{
££ 
return
§§ 	
new
§§
 
Messager
§§ 
(
§§ 
port
§§ 
)
§§ 
;
§§ 
}
•• 
public
ßß 
void
ßß	 
Dispose
ßß 
(
ßß 
)
ßß 
{
®® 
lock
©© 
(
©© 	
_disposeLock
©©	 
)
©© 
{
™™ 
	_disposed
´´ 
=
´´ 
true
´´ 
;
´´ 
_socket
¨¨ 
.
¨¨ 
Close
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
}
≠≠ 
}
ÆÆ 
}
ØØ 
}∞∞ ˙
ïD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\Serializer.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
.- .
	Messaging. 7
{		 
internal

 	
class


 

Serializer

 
{ 
private 	
readonly
 
MemoryStream 
_stream  '
;' (
private 	
readonly
 
BinaryWriter 
_writer  '
;' (
public 

Serializer	 
( 
) 
{ 
_stream 

= 
new 
MemoryStream 
( 
) 
;  
_writer 

= 
new 
BinaryWriter 
( 
_stream %
)% &
;& '
} 
public 
void	 

WriteInt32 
( 
int 
i 
) 
{ 
_writer 

.
 
Write 
( 
i 
) 
; 
} 
public 
void	 
WriteString 
( 
string  
s! "
)" #
{ 
var 
bytes 
= 
Encoding 
. 
UTF8 
. 
GetBytes %
(% &
s& '
??( *
$str+ -
)- .
;. /
if 
( 
bytes 
. 
Length 
> 
$num 
) 
{ 
_writer 
. 
Write 
( 
bytes 
. 
Length 
) 
;  
_writer   
.   
Write   
(   
bytes   
)   
;   
}!! 
else"" 
_writer## 
.## 
Write## 
(## 
$num## 
)## 
;## 
}$$ 
public&& 
byte&&	 
[&& 
]&& 
Buffer&& 
(&& 
)&& 
{'' 
return(( 	
_stream((
 
.(( 
ToArray(( 
((( 
)(( 
;(( 
})) 
}** 
}++ ç
°D:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\ProjectGeneration\FileIOProvider.cs
	namespace		 	
	Microsoft		
 
.		 
Unity		 
.		 
VisualStudio		 &
.		& '
Editor		' -
{

 
public 
	interface 
IFileIO 
{ 
bool 
Exists 
( 
string 
fileName 
) 
; 
string 
ReadAllText	 
( 
string 
fileName $
)$ %
;% &
void 
WriteAllText 
( 
string 
fileName #
,# $
string% +
content, 3
)3 4
;4 5
} 
class 
FileIOProvider 
: 
IFileIO 
{ 
public 
bool	 
Exists 
( 
string 
fileName $
)$ %
{ 
return 	
File
 
. 
Exists 
( 
fileName 
) 
;  
} 
public 
string	 
ReadAllText 
( 
string "
fileName# +
)+ ,
{ 
return 	
File
 
. 
ReadAllText 
( 
fileName #
)# $
;$ %
} 
public 
void	 
WriteAllText 
( 
string !
fileName" *
,* +
string, 2
content3 :
): ;
{   
File!! 
.!! 
WriteAllText!! 
(!! 
fileName!! 
,!! 
content!! &
,!!& '
Encoding!!( 0
.!!0 1
UTF8!!1 5
)!!5 6
;!!6 7
}"" 
}## 
}$$ ·
óD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\Deserializer.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
.- .
	Messaging. 7
{		 
internal

 	
class


 
Deserializer

 
{ 
private 	
readonly
 
BinaryReader 
_reader  '
;' (
private 	
const
 
int 
MaxStringLength #
=$ %
$num& +
;+ ,
public 
Deserializer	 
( 
byte 
[ 
] 
buffer #
)# $
{ 
_reader 

= 
new 
BinaryReader 
( 
new !
MemoryStream" .
(. /
buffer/ 5
)5 6
)6 7
;7 8
} 
public 
int	 
	ReadInt32 
( 
) 
{ 
return 	
_reader
 
. 
	ReadInt32 
( 
) 
; 
} 
public 
string	 

ReadString 
( 
) 
{ 
var 
length 
= 
	ReadInt32 
( 
) 
; 
return 	
length
 
> 
$num 
&& 
length 
<= !
MaxStringLength" 1
? 
Encoding 
. 
UTF8 
. 
	GetString 
( 
_reader %
.% &
	ReadBytes& /
(/ 0
length0 6
)6 7
)7 8
:   
$str   
;   	
}!! 
public## 
bool##	 
CanReadMore## 
(## 
)## 
{$$ 
return%% 	
_reader%%
 
.%% 

BaseStream%% 
.%% 
Position%% %
<%%& '
_reader%%( /
.%%/ 0

BaseStream%%0 :
.%%: ;
Length%%; A
;%%A B
}&& 
}'' 
}(( ‚ª
§D:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\ProjectGeneration\ProjectGeneration.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
public 
enum 
ScriptingLanguage 
{ 
None 
, 
CSharp 
} 
public 
	interface 

IGenerator 
{ 
bool 
SyncIfNeeded 
( 
IEnumerable 
<  
string  &
>& '
affectedFiles( 5
,5 6
IEnumerable7 B
<B C
stringC I
>I J
reimportedFilesK Z
)Z [
;[ \
void   
Sync   
(   
)   
;   
bool!! $
HasSolutionBeenGenerated!! 
(!!  
)!!  !
;!!! "
bool"" 
IsSupportedFile"" 
("" 
string"" 
path"" "
)""" #
;""# $
string## 
SolutionFile##	 
(## 
)## 
;## 
string$$ 
ProjectDirectory$$	 
{$$ 
get$$ 
;$$  
}$$! "!
IAssemblyNameProvider%%  
AssemblyNameProvider%% ,
{%%- .
get%%/ 2
;%%2 3
}%%4 5
}&& 
public(( 
class(( 
ProjectGeneration(( 
:((  !

IGenerator((" ,
{)) 
public** 
static**	 
readonly** 
string** 
MSBuildNamespaceUri**  3
=**4 5
$str**6 k
;**k l
public++ !
IAssemblyNameProvider++	  
AssemblyNameProvider++ 3
=>++4 6"
m_AssemblyNameProvider++7 M
;++M N
public,, 
string,,	 
ProjectDirectory,,  
{,,! "
get,,# &
;,,& '
},,( )
const.. 
string.. 
k_WindowsNewline.. 
=..  !
$str.." (
;..( )
string00 *
m_SolutionProjectEntryTemplate00	 '
=00( )
$str00* n
;00n o
string22 2
&m_SolutionProjectConfigurationTemplate22	 /
=220 1
string222 8
.228 9
Join229 =
(22= >
$str22> D
,22D E
$str33 =
,33= >
$str44 ;
,44; <
$str55 A
,55A B
$str66 ?
)66? @
.66@ A
Replace66A H
(66H I
$str66I O
,66O P
$str66Q U
)66U V
;66V W
static88 
readonly88	 
string88 
[88 
]88 $
k_ReimportSyncExtensions88 3
=884 5
{886 7
$str888 >
,88> ?
$str88@ I
}88J K
;88K L
static:: 
readonly::	 
Regex:: '
k_ScriptReferenceExpression:: 3
=::4 5
new::6 9
Regex::: ?
(::? @
$str;; @
,;;@ A
RegexOptions<< 
.<< 
Compiled<< 
|<< 
RegexOptions<< '
.<<' (

IgnoreCase<<( 2
)<<2 3
;<<3 4
string>> 
[>> 	
]>>	 
(
m_ProjectSupportedExtensions>> '
=>>( )
Array>>* /
.>>/ 0
Empty>>0 5
<>>5 6
string>>6 <
>>>< =
(>>= >
)>>> ?
;>>? @
string?? 
[?? 	
]??	 
(
m_BuiltinSupportedExtensions?? '
=??( )
Array??* /
.??/ 0
Empty??0 5
<??5 6
string??6 <
>??< =
(??= >
)??> ?
;??? @
readonlyAA 

stringAA 
m_ProjectNameAA 
;AA  
readonlyBB 
!
IAssemblyNameProviderBB  "
m_AssemblyNameProviderBB! 7
;BB7 8
readonlyCC 

IFileIOCC 
m_FileIOProviderCC #
;CC# $
readonlyDD 

IGUIDGeneratorDD 
m_GUIDGeneratorDD )
;DD) *
boolEE 
m_ShouldGenerateAllEE 
;EE %
IVisualStudioInstallationFF !
m_CurrentInstallationFF 1
;FF1 2
publicHH 
ProjectGenerationHH	 
(HH 
)HH 
:HH 
thisHH #
(HH# $
	DirectoryHH$ -
.HH- .
	GetParentHH. 7
(HH7 8
ApplicationHH8 C
.HHC D
dataPathHHD L
)HHL M
.HHM N
FullNameHHN V
)HHV W
{II 
}JJ 
publicLL 
ProjectGenerationLL	 
(LL 
stringLL !
tempDirectoryLL" /
)LL/ 0
:LL1 2
thisLL3 7
(LL7 8
tempDirectoryLL8 E
,LLE F
newLLG J 
AssemblyNameProviderLLK _
(LL_ `
)LL` a
,LLa b
newLLc f
FileIOProviderLLg u
(LLu v
)LLv w
,LLw x
newLLy |
GUIDProvider	LL} â
(
LLâ ä
)
LLä ã
)
LLã å
{MM 
}NN 
publicPP 
ProjectGenerationPP	 
(PP 
stringPP !
tempDirectoryPP" /
,PP/ 0!
IAssemblyNameProviderPP1 F 
assemblyNameProviderPPG [
,PP[ \
IFileIOPP] d
fileIoProviderPPe s
,PPs t
IGUIDGenerator	PPu É
guidGenerator
PPÑ ë
)
PPë í
{QQ 
ProjectDirectoryRR 
=RR 
FileUtilityRR !
.RR! ""
NormalizeWindowsToUnixRR" 8
(RR8 9
tempDirectoryRR9 F
)RRF G
;RRG H
m_ProjectNameSS 
=SS 
PathSS 
.SS 
GetFileNameSS #
(SS# $
ProjectDirectorySS$ 4
)SS4 5
;SS5 6"
m_AssemblyNameProviderTT 
=TT  
assemblyNameProviderTT 0
;TT0 1
m_FileIOProviderUU 
=UU 
fileIoProviderUU $
;UU$ %
m_GUIDGeneratorVV 
=VV 
guidGeneratorVV "
;VV" #+
SetupProjectSupportedExtensionsXX "
(XX" #
)XX# $
;XX$ %
}YY 
publicgg 
boolgg	 
SyncIfNeededgg 
(gg 
IEnumerablegg &
<gg& '
stringgg' -
>gg- .
affectedFilesgg/ <
,gg< =
IEnumerablegg> I
<ggI J
stringggJ P
>ggP Q
reimportedFilesggR a
)gga b
{hh +
SetupProjectSupportedExtensionsii "
(ii" #
)ii# $
;ii$ %$
CreateVsConfigIfNotFoundmm 
(mm 
)mm 
;mm 
ifpp 
(pp $
HasSolutionBeenGeneratedpp 
(pp  
)pp  !
&&pp" $ 
HasFilesBeenModifiedpp% 9
(pp9 :
affectedFilespp: G
,ppG H
reimportedFilesppI X
)ppX Y
)ppY Z
{qq 
Syncrr 
(rr 	
)rr	 

;rr
 
returnss 

truess 
;ss 
}tt 
returnuu 	
falseuu
 
;uu 
}vv 
privatexx 	
voidxx
 $
CreateVsConfigIfNotFoundxx '
(xx' (
)xx( )
{yy 
tryzz 
{{{ 
var|| 
vsConfigFile|| 
=|| 
VsConfigFile|| #
(||# $
)||$ %
;||% &
if}} 
(}} 
m_FileIOProvider}} 
.}} 
Exists}} 
(}}  
vsConfigFile}}  ,
)}}, -
)}}- .
return~~ 
;~~ 
var
ÄÄ 
content
ÄÄ 
=
ÄÄ 
$@"
ÄÄ D
6{{
  ""version"": ""1.0"",
  ""components"": [ 
    ""
ÄÉ 
{
ÉÉ 
	Discovery
ÉÉ 
.
ÉÉ 
ManagedWorkload
ÉÉ  
}
ÉÉ  !
""
  ]
}} 
ÉÜ!
"ÜÜ 
;
ÜÜ 
m_FileIOProvider
áá 
.
áá 
WriteAllText
áá !
(
áá! "
vsConfigFile
áá" .
,
áá. /
content
áá0 7
)
áá7 8
;
áá8 9
}
àà 
catch
ââ 
(
ââ	 

IOException
ââ
 
)
ââ 
{
ää 
}
ãã 
}
åå 
private
éé 	
bool
éé
 "
HasFilesBeenModified
éé #
(
éé# $
IEnumerable
éé$ /
<
éé/ 0
string
éé0 6
>
éé6 7
affectedFiles
éé8 E
,
ééE F
IEnumerable
ééG R
<
ééR S
string
ééS Y
>
ééY Z
reimportedFiles
éé[ j
)
ééj k
{
èè 
return
êê 	
affectedFiles
êê
 
.
êê 
Any
êê 
(
êê (
ShouldFileBePartOfSolution
êê 6
)
êê6 7
||
êê8 :
reimportedFiles
êê; J
.
êêJ K
Any
êêK N
(
êêN O)
ShouldSyncOnReimportedAsset
êêO j
)
êêj k
;
êêk l
}
ëë 
private
ìì 	
static
ìì
 
bool
ìì )
ShouldSyncOnReimportedAsset
ìì 1
(
ìì1 2
string
ìì2 8
asset
ìì9 >
)
ìì> ?
{
îî 
return
ïï 	&
k_ReimportSyncExtensions
ïï
 "
.
ïï" #
Contains
ïï# +
(
ïï+ ,
new
ïï, /
FileInfo
ïï0 8
(
ïï8 9
asset
ïï9 >
)
ïï> ?
.
ïï? @
	Extension
ïï@ I
)
ïïI J
;
ïïJ K
}
ññ 
private
òò 	
void
òò
 (
RefreshCurrentInstallation
òò )
(
òò) *
)
òò* +
{
ôô 
var
öö 
editor
öö 
=
öö 

CodeEditor
öö 
.
öö 
CurrentEditor
öö (
as
öö) + 
VisualStudioEditor
öö, >
;
öö> ?
editor
õõ 	
?
õõ	 

.
õõ
 3
%TryGetVisualStudioInstallationForPath
õõ 0
(
õõ0 1

CodeEditor
õõ1 ;
.
õõ; <'
CurrentEditorInstallation
õõ< U
,
õõU V
out
õõW Z#
m_CurrentInstallation
õõ[ p
)
õõp q
;
õõq r
}
úú 
public
ûû 
void
ûû	 
Sync
ûû 
(
ûû 
)
ûû 
{
üü (
RefreshCurrentInstallation
°° 
(
°° 
)
°° 
;
°°  -
SetupProjectSupportedExtensions
££ "
(
££" #
)
££# $
;
££$ %
var
§§ 2
$externalCodeAlreadyGeneratedProjects
§§ +
=
§§, -+
OnPreGeneratingCSProjectFiles
§§. K
(
§§K L
)
§§L M
;
§§M N
if
¶¶ 
(
¶¶ 
!
¶¶ 2
$externalCodeAlreadyGeneratedProjects
¶¶ ,
)
¶¶, -
{
ßß 1
#GenerateAndWriteSolutionAndProjects
®® '
(
®®' (
)
®®( )
;
®®) *
}
©© '
OnGeneratedCSProjectFiles
™™ 
(
™™ 
)
™™ 
;
™™ 
}
´´ 
public
≠≠ 
bool
≠≠	 &
HasSolutionBeenGenerated
≠≠ &
(
≠≠& '
)
≠≠' (
{
ÆÆ 
return
ØØ 	
m_FileIOProvider
ØØ
 
.
ØØ 
Exists
ØØ !
(
ØØ! "
SolutionFile
ØØ" .
(
ØØ. /
)
ØØ/ 0
)
ØØ0 1
;
ØØ1 2
}
∞∞ 
private
≤≤ 	
void
≤≤
 -
SetupProjectSupportedExtensions
≤≤ .
(
≤≤. /
)
≤≤/ 0
{
≥≥ *
m_ProjectSupportedExtensions
¥¥ 
=
¥¥  !$
m_AssemblyNameProvider
¥¥" 8
.
¥¥8 9(
ProjectSupportedExtensions
¥¥9 S
;
¥¥S T*
m_BuiltinSupportedExtensions
µµ 
=
µµ  !
EditorSettings
µµ" 0
.
µµ0 10
"projectGenerationBuiltinExtensions
µµ1 S
;
µµS T
}
∂∂ 
private
∏∏ 	
bool
∏∏
 (
ShouldFileBePartOfSolution
∏∏ )
(
∏∏) *
string
∏∏* 0
file
∏∏1 5
)
∏∏5 6
{
ππ 
if
ªª 
(
ªª $
m_AssemblyNameProvider
ªª 
.
ªª '
IsInternalizedPackagePath
ªª 7
(
ªª7 8
file
ªª8 <
)
ªª< =
)
ªª= >
{
ºº 
return
ΩΩ 

false
ΩΩ 
;
ΩΩ 
}
ææ 
return
¿¿ 	
IsSupportedFile
¿¿
 
(
¿¿ 
file
¿¿ 
)
¿¿ 
;
¿¿  
}
¡¡ 
private
√√ 	
static
√√
 
string
√√ $
GetExtensionWithoutDot
√√ .
(
√√. /
string
√√/ 5
path
√√6 :
)
√√: ;
{
ƒƒ 
if
∆∆ 
(
∆∆ 
!
∆∆ 
Path
∆∆ 
.
∆∆ 
HasExtension
∆∆ 
(
∆∆ 
path
∆∆ 
)
∆∆ 
)
∆∆  
return
«« 

path
«« 
;
«« 
return
…… 	
Path
……
 
.
   
GetExtension
   
(
   
path
   
)
   
.
ÀÀ 
	TrimStart
ÀÀ 
(
ÀÀ 
$char
ÀÀ 
)
ÀÀ 
.
ÃÃ 
ToLower
ÃÃ 
(
ÃÃ 
)
ÃÃ 
;
ÃÃ 
}
ÕÕ 
public
œœ 
bool
œœ	 
IsSupportedFile
œœ 
(
œœ 
string
œœ $
path
œœ% )
)
œœ) *
{
–– 
var
—— 
	extension
—— 
=
—— $
GetExtensionWithoutDot
—— )
(
——) *
path
——* .
)
——. /
;
——/ 0
if
‘‘ 
(
‘‘ 
	extension
‘‘ 
==
‘‘ 
$str
‘‘ 
)
‘‘ 
return
’’ 

true
’’ 
;
’’ 
if
◊◊ 
(
◊◊ 
	extension
◊◊ 
==
◊◊ 
$str
◊◊ 
)
◊◊ 
return
ÿÿ 

true
ÿÿ 
;
ÿÿ 
if
⁄⁄ 
(
⁄⁄ *
m_BuiltinSupportedExtensions
⁄⁄ #
.
⁄⁄# $
Contains
⁄⁄$ ,
(
⁄⁄, -
	extension
⁄⁄- 6
)
⁄⁄6 7
)
⁄⁄7 8
return
€€ 

true
€€ 
;
€€ 
if
›› 
(
›› *
m_ProjectSupportedExtensions
›› #
.
››# $
Contains
››$ ,
(
››, -
	extension
››- 6
)
››6 7
)
››7 8
return
ﬁﬁ 

true
ﬁﬁ 
;
ﬁﬁ 
return
‡‡ 	
false
‡‡
 
;
‡‡ 
}
·· 
private
„„ 	
static
„„
 
ScriptingLanguage
„„ ""
ScriptingLanguageFor
„„# 7
(
„„7 8
Assembly
„„8 @
assembly
„„A I
)
„„I J
{
‰‰ 
var
ÂÂ 
files
ÂÂ 
=
ÂÂ 
assembly
ÂÂ 
.
ÂÂ 
sourceFiles
ÂÂ #
;
ÂÂ# $
if
ÁÁ 
(
ÁÁ 
files
ÁÁ 
.
ÁÁ 
Length
ÁÁ 
==
ÁÁ 
$num
ÁÁ 
)
ÁÁ 
return
ËË 

ScriptingLanguage
ËË 
.
ËË 
None
ËË !
;
ËË! "
return
ÍÍ 	"
ScriptingLanguageFor
ÍÍ
 
(
ÍÍ 
files
ÍÍ $
[
ÍÍ$ %
$num
ÍÍ% &
]
ÍÍ& '
)
ÍÍ' (
;
ÍÍ( )
}
ÎÎ 
internal
ÌÌ 

static
ÌÌ 
ScriptingLanguage
ÌÌ #"
ScriptingLanguageFor
ÌÌ$ 8
(
ÌÌ8 9
string
ÌÌ9 ?
path
ÌÌ@ D
)
ÌÌD E
{
ÓÓ 
return
ÔÔ 	$
GetExtensionWithoutDot
ÔÔ
  
(
ÔÔ  !
path
ÔÔ! %
)
ÔÔ% &
==
ÔÔ' )
$str
ÔÔ* .
?
ÔÔ/ 0
ScriptingLanguage
ÔÔ1 B
.
ÔÔB C
CSharp
ÔÔC I
:
ÔÔJ K
ScriptingLanguage
ÔÔL ]
.
ÔÔ] ^
None
ÔÔ^ b
;
ÔÔb c
}
 
public
ÚÚ 
void
ÚÚ	 1
#GenerateAndWriteSolutionAndProjects
ÚÚ 1
(
ÚÚ1 2
)
ÚÚ2 3
{
ÛÛ 
var
ˆˆ 

assemblies
ˆˆ 
=
ˆˆ $
m_AssemblyNameProvider
ˆˆ *
.
ˆˆ* +
GetAssemblies
ˆˆ+ 8
(
ˆˆ8 9(
ShouldFileBePartOfSolution
ˆˆ9 S
)
ˆˆS T
;
ˆˆT U
var
¯¯ "
allAssetProjectParts
¯¯ 
=
¯¯ *
GenerateAllAssetProjectParts
¯¯ :
(
¯¯: ;
)
¯¯; <
;
¯¯< =
var
˙˙ 
assemblyList
˙˙ 
=
˙˙ 

assemblies
˙˙  
.
˙˙  !
ToList
˙˙! '
(
˙˙' (
)
˙˙( )
;
˙˙) *
SyncSolution
¸¸ 
(
¸¸ 
assemblyList
¸¸ 
)
¸¸ 
;
¸¸ 
var
˛˛ "
allProjectAssemblies
˛˛ 
=
˛˛ '
RelevantAssembliesForMode
˛˛ 7
(
˛˛7 8
assemblyList
˛˛8 D
)
˛˛D E
.
˛˛E F
ToList
˛˛F L
(
˛˛L M
)
˛˛M N
;
˛˛N O
foreach
ÄÄ 

(
ÄÄ 
Assembly
ÄÄ 
assembly
ÄÄ 
in
ÄÄ  "
allProjectAssemblies
ÄÄ! 5
)
ÄÄ5 6
{
ÅÅ 
SyncProject
ÇÇ 
(
ÇÇ 
assembly
ÇÇ 
,
ÇÇ "
allAssetProjectParts
ÉÉ 
,
ÉÉ 
responseFilesData
ÑÑ 
:
ÑÑ #
ParseResponseFileData
ÑÑ -
(
ÑÑ- .
assembly
ÑÑ. 6
)
ÑÑ6 7
,
ÑÑ7 8"
allProjectAssemblies
ÖÖ 
,
ÖÖ 
assembly
áá 
.
áá 
compilerOptions
áá &
.
áá& '$
RoslynAnalyzerDllPaths
áá' =
)
áá= >
;
áá> ?
}
ãã 
}
åå 
private
éé 	
IEnumerable
éé
 
<
éé 
ResponseFileData
éé &
>
éé& '#
ParseResponseFileData
éé( =
(
éé= >
Assembly
éé> F
assembly
ééG O
)
ééO P
{
èè 
var
êê (
systemReferenceDirectories
êê !
=
êê" #!
CompilationPipeline
êê$ 7
.
êê7 8*
GetSystemAssemblyDirectories
êê8 T
(
êêT U
assembly
êêU ]
.
êê] ^
compilerOptions
êê^ m
.
êêm n$
ApiCompatibilityLevelêên É
)êêÉ Ñ
;êêÑ Ö

Dictionary
íí 
<
íí 
string
íí 
,
íí 
ResponseFileData
íí &
>
íí& '
responseFilesData
íí( 9
=
íí: ;
assembly
íí< D
.
ííD E
compilerOptions
ííE T
.
ííT U
ResponseFiles
ííU b
.
ííb c
ToDictionary
ííc o
(
íío p
x
ííp q
=>
íír t
x
ííu v
,
íív w
x
ííx y
=>
ííz |%
m_AssemblyNameProvideríí} ì
.ííì î!
ParseResponseFileííî •
(íí• ¶
x
ìì 
,
ìì 
ProjectDirectory
îî 
,
îî (
systemReferenceDirectories
ïï 
)
ññ 
)
ññ 
;
ññ 

Dictionary
òò 
<
òò 
string
òò 
,
òò 
ResponseFileData
òò &
>
òò& '%
responseFilesWithErrors
òò( ?
=
òò@ A
responseFilesData
òòB S
.
òòS T
Where
òòT Y
(
òòY Z
x
òòZ [
=>
òò\ ^
x
òò_ `
.
òò` a
Value
òòa f
.
òòf g
Errors
òòg m
.
òòm n
Any
òòn q
(
òòq r
)
òòr s
)
òòs t
.
ôô 
ToDictionary
ôô 
(
ôô 
x
ôô 
=>
ôô 
x
ôô 
.
ôô 
Key
ôô 
,
ôô 
x
ôô 
=>
ôô  "
x
ôô# $
.
ôô$ %
Value
ôô% *
)
ôô* +
;
ôô+ ,
if
õõ 
(
õõ %
responseFilesWithErrors
õõ 
.
õõ 
Any
õõ "
(
õõ" #
)
õõ# $
)
õõ$ %
{
úú 
foreach
ùù 
(
ùù 
var
ùù 
error
ùù 
in
ùù %
responseFilesWithErrors
ùù 1
)
ùù1 2
foreach
ûû 
(
ûû 
var
ûû 

valueError
ûû 
in
ûû 
error
ûû  %
.
ûû% &
Value
ûû& +
.
ûû+ ,
Errors
ûû, 2
)
ûû2 3
{
üü 
Debug
†† 
.
†† 
LogError
†† 
(
†† 
$"
†† 
{
†† 
error
†† 
.
†† 
Key
†† !
}
††! "
 Parse Error : 
††" 1
{
††1 2

valueError
††2 <
}
††< =
"
††= >
)
††> ?
;
††? @
}
°° 
}
¢¢ 
return
§§ 	
responseFilesData
§§
 
.
§§ 
Select
§§ "
(
§§" #
x
§§# $
=>
§§% '
x
§§( )
.
§§) *
Value
§§* /
)
§§/ 0
;
§§0 1
}
•• 
private
ßß 	

Dictionary
ßß
 
<
ßß 
string
ßß 
,
ßß 
string
ßß #
>
ßß# $*
GenerateAllAssetProjectParts
ßß% A
(
ßßA B
)
ßßB C
{
®® 

Dictionary
©© 
<
©© 
string
©© 
,
©© 
StringBuilder
©© #
>
©©# $
stringBuilders
©©% 3
=
©©4 5
new
©©6 9

Dictionary
©©: D
<
©©D E
string
©©E K
,
©©K L
StringBuilder
©©M Z
>
©©Z [
(
©©[ \
)
©©\ ]
;
©©] ^
foreach
´´ 

(
´´ 
string
´´ 
asset
´´ 
in
´´ $
m_AssemblyNameProvider
´´ 2
.
´´2 3
GetAllAssetPaths
´´3 C
(
´´C D
)
´´D E
)
´´E F
{
¨¨ 
if
ÆÆ 
(
ÆÆ $
m_AssemblyNameProvider
ÆÆ 
.
ÆÆ '
IsInternalizedPackagePath
ÆÆ 8
(
ÆÆ8 9
asset
ÆÆ9 >
)
ÆÆ> ?
)
ÆÆ? @
{
ØØ 
continue
∞∞ 
;
∞∞ 
}
±± 
if
≥≥ 
(
≥≥ 
IsSupportedFile
≥≥ 
(
≥≥ 
asset
≥≥ 
)
≥≥ 
&&
≥≥ !
ScriptingLanguage
≥≥" 3
.
≥≥3 4
None
≥≥4 8
==
≥≥9 ;"
ScriptingLanguageFor
≥≥< P
(
≥≥P Q
asset
≥≥Q V
)
≥≥V W
)
≥≥W X
{
¥¥ 
var
∂∂ 
assemblyName
∂∂	 
=
∂∂ $
m_AssemblyNameProvider
∂∂ .
.
∂∂. /+
GetAssemblyNameFromScriptPath
∂∂/ L
(
∂∂L M
asset
∂∂M R
+
∂∂S T
$str
∂∂U Z
)
∂∂Z [
;
∂∂[ \
if
∏∏ 
(
∏∏ 	
string
∏∏	 
.
∏∏ 
IsNullOrEmpty
∏∏ 
(
∏∏ 
assemblyName
∏∏ *
)
∏∏* +
)
∏∏+ ,
{
ππ 
continue
∫∫ 
;
∫∫ 
}
ªª 
assemblyName
ΩΩ 
=
ΩΩ 
Path
ΩΩ 
.
ΩΩ )
GetFileNameWithoutExtension
ΩΩ 4
(
ΩΩ4 5
assemblyName
ΩΩ5 A
)
ΩΩA B
;
ΩΩB C
if
øø 
(
øø 	
!
øø	 

stringBuilders
øø
 
.
øø 
TryGetValue
øø $
(
øø$ %
assemblyName
øø% 1
,
øø1 2
out
øø3 6
var
øø7 :
projectBuilder
øø; I
)
øøI J
)
øøJ K
{
¿¿ 
projectBuilder
¡¡ 
=
¡¡ 
new
¡¡ 
StringBuilder
¡¡ (
(
¡¡( )
)
¡¡) *
;
¡¡* +
stringBuilders
¬¬ 
[
¬¬ 
assemblyName
¬¬ !
]
¬¬! "
=
¬¬# $
projectBuilder
¬¬% 3
;
¬¬3 4
}
√√ 
projectBuilder
≈≈ 
.
≈≈ 
Append
≈≈ 
(
≈≈ 
$str
≈≈ 2
)
≈≈2 3
.
≈≈3 4
Append
≈≈4 :
(
≈≈: ;$
EscapedRelativePathFor
≈≈; Q
(
≈≈Q R
asset
≈≈R W
)
≈≈W X
)
≈≈X Y
.
≈≈Y Z
Append
≈≈Z `
(
≈≈` a
$str
≈≈a h
)
≈≈h i
.
≈≈i j
Append
≈≈j p
(
≈≈p q
k_WindowsNewline≈≈q Å
)≈≈Å Ç
;≈≈Ç É
}
∆∆ 
}
«« 
var
…… 
result
…… 
=
…… 
new
…… 

Dictionary
…… 
<
…… 
string
…… %
,
……% &
string
……' -
>
……- .
(
……. /
)
……/ 0
;
……0 1
foreach
ÀÀ 

(
ÀÀ 
var
ÀÀ 
entry
ÀÀ 
in
ÀÀ 
stringBuilders
ÀÀ '
)
ÀÀ' (
result
ÃÃ 

[
ÃÃ
 
entry
ÃÃ 
.
ÃÃ 
Key
ÃÃ 
]
ÃÃ 
=
ÃÃ 
entry
ÃÃ 
.
ÃÃ 
Value
ÃÃ #
.
ÃÃ# $
ToString
ÃÃ$ ,
(
ÃÃ, -
)
ÃÃ- .
;
ÃÃ. /
return
ŒŒ 	
result
ŒŒ
 
;
ŒŒ 
}
œœ 
private
—— 	
void
——
 
SyncProject
—— 
(
—— 
Assembly
““ 
assembly
““ 
,
““ 

Dictionary
”” 
<
”” 
string
”” 
,
”” 
string
”” 
>
”” #
allAssetsProjectParts
”” 3
,
””3 4
IEnumerable
‘‘ 
<
‘‘ 
ResponseFileData
‘‘ 
>
‘‘  
responseFilesData
‘‘! 2
,
‘‘2 3
List
’’ 
<
’’ 
Assembly
’’ 
>
’’ "
allProjectAssemblies
’’ &
,
’’& '
string
÷÷ 	
[
÷÷	 

]
÷÷
 $
roslynAnalyzerDllPaths
÷÷ "
)
÷÷" #
{
◊◊ )
SyncProjectFileIfNotChanged
ÿÿ 
(
ÿÿ 
ProjectFile
ŸŸ 
(
ŸŸ 
assembly
ŸŸ 
)
ŸŸ 
,
ŸŸ 
ProjectText
⁄⁄ 
(
⁄⁄ 
assembly
⁄⁄ 
,
⁄⁄ #
allAssetsProjectParts
⁄⁄ /
,
⁄⁄/ 0
responseFilesData
⁄⁄1 B
,
⁄⁄B C"
allProjectAssemblies
⁄⁄D X
,
⁄⁄X Y$
roslynAnalyzerDllPaths
⁄⁄Z p
)
⁄⁄p q
)
⁄⁄q r
;
⁄⁄r s
}
€€ 
private
›› 	
void
››
 )
SyncProjectFileIfNotChanged
›› *
(
››* +
string
››+ 1
path
››2 6
,
››6 7
string
››8 >
newContents
››? J
)
››J K
{
ﬁﬁ 
if
ﬂﬂ 
(
ﬂﬂ 
Path
ﬂﬂ 
.
ﬂﬂ 
GetExtension
ﬂﬂ 
(
ﬂﬂ 
path
ﬂﬂ 
)
ﬂﬂ 
==
ﬂﬂ !
$str
ﬂﬂ" +
)
ﬂﬂ+ ,
{
‡‡ 
newContents
·· 
=
·· "
OnGeneratedCSProject
·· &
(
··& '
path
··' +
,
··+ ,
newContents
··- 8
)
··8 9
;
··9 :
}
‚‚ "
SyncFileIfNotChanged
‰‰ 
(
‰‰ 
path
‰‰ 
,
‰‰ 
newContents
‰‰ )
)
‰‰) *
;
‰‰* +
}
ÂÂ 
private
ÁÁ 	
void
ÁÁ
 *
SyncSolutionFileIfNotChanged
ÁÁ +
(
ÁÁ+ ,
string
ÁÁ, 2
path
ÁÁ3 7
,
ÁÁ7 8
string
ÁÁ9 ?
newContents
ÁÁ@ K
)
ÁÁK L
{
ËË 
newContents
ÈÈ 
=
ÈÈ $
OnGeneratedSlnSolution
ÈÈ '
(
ÈÈ' (
path
ÈÈ( ,
,
ÈÈ, -
newContents
ÈÈ. 9
)
ÈÈ9 :
;
ÈÈ: ;"
SyncFileIfNotChanged
ÎÎ 
(
ÎÎ 
path
ÎÎ 
,
ÎÎ 
newContents
ÎÎ )
)
ÎÎ) *
;
ÎÎ* +
}
ÏÏ 
private
ÓÓ 	
static
ÓÓ
 
IEnumerable
ÓÓ 
<
ÓÓ 
SR
ÓÓ 
.
ÓÓ  

MethodInfo
ÓÓ  *
>
ÓÓ* +'
GetPostProcessorCallbacks
ÓÓ, E
(
ÓÓE F
string
ÓÓF L
name
ÓÓM Q
)
ÓÓQ R
{
ÔÔ 
return
 	
	TypeCache

 
.
ÒÒ !
GetTypesDerivedFrom
ÒÒ 
<
ÒÒ  
AssetPostprocessor
ÒÒ +
>
ÒÒ+ ,
(
ÒÒ, -
)
ÒÒ- .
.
ÚÚ 
Select
ÚÚ 
(
ÚÚ 
t
ÚÚ 
=>
ÚÚ 
t
ÚÚ 
.
ÚÚ 
	GetMethod
ÚÚ 
(
ÚÚ 
name
ÚÚ !
,
ÚÚ! "
SR
ÚÚ# %
.
ÚÚ% &
BindingFlags
ÚÚ& 2
.
ÚÚ2 3
Public
ÚÚ3 9
|
ÚÚ: ;
SR
ÚÚ< >
.
ÚÚ> ?
BindingFlags
ÚÚ? K
.
ÚÚK L
	NonPublic
ÚÚL U
|
ÚÚV W
SR
ÚÚX Z
.
ÚÚZ [
BindingFlags
ÚÚ[ g
.
ÚÚg h
Static
ÚÚh n
)
ÚÚn o
)
ÚÚo p
.
ÛÛ 
Where
ÛÛ 

(
ÛÛ
 
m
ÛÛ 
=>
ÛÛ 
m
ÛÛ 
!=
ÛÛ 
null
ÛÛ 
)
ÛÛ 
;
ÛÛ 
}
ÙÙ 
static
ˆˆ 
void
ˆˆ	 '
OnGeneratedCSProjectFiles
ˆˆ '
(
ˆˆ' (
)
ˆˆ( )
{
˜˜ 
foreach
¯¯ 

(
¯¯ 
var
¯¯ 
method
¯¯ 
in
¯¯ '
GetPostProcessorCallbacks
¯¯ 3
(
¯¯3 4
nameof
¯¯4 :
(
¯¯: ;'
OnGeneratedCSProjectFiles
¯¯; T
)
¯¯T U
)
¯¯U V
)
¯¯V W
{
˘˘ 
method
˙˙ 

.
˙˙
 
Invoke
˙˙ 
(
˙˙ 
null
˙˙ 
,
˙˙ 
Array
˙˙ 
.
˙˙ 
Empty
˙˙ #
<
˙˙# $
object
˙˙$ *
>
˙˙* +
(
˙˙+ ,
)
˙˙, -
)
˙˙- .
;
˙˙. /
}
˚˚ 
}
¸¸ 
private
˛˛ 	
static
˛˛
 
bool
˛˛ +
OnPreGeneratingCSProjectFiles
˛˛ 3
(
˛˛3 4
)
˛˛4 5
{
ˇˇ 
bool
ÄÄ 
result
ÄÄ 
=
ÄÄ 
false
ÄÄ 
;
ÄÄ 
foreach
ÇÇ 

(
ÇÇ 
var
ÇÇ 
method
ÇÇ 
in
ÇÇ '
GetPostProcessorCallbacks
ÇÇ 3
(
ÇÇ3 4
nameof
ÇÇ4 :
(
ÇÇ: ;+
OnPreGeneratingCSProjectFiles
ÇÇ; X
)
ÇÇX Y
)
ÇÇY Z
)
ÇÇZ [
{
ÉÉ 
var
ÑÑ 
retValue
ÑÑ 
=
ÑÑ 
method
ÑÑ 
.
ÑÑ 
Invoke
ÑÑ  
(
ÑÑ  !
null
ÑÑ! %
,
ÑÑ% &
Array
ÑÑ' ,
.
ÑÑ, -
Empty
ÑÑ- 2
<
ÑÑ2 3
object
ÑÑ3 9
>
ÑÑ9 :
(
ÑÑ: ;
)
ÑÑ; <
)
ÑÑ< =
;
ÑÑ= >
if
ÖÖ 
(
ÖÖ 
method
ÖÖ 
.
ÖÖ 

ReturnType
ÖÖ 
==
ÖÖ 
typeof
ÖÖ #
(
ÖÖ# $
bool
ÖÖ$ (
)
ÖÖ( )
)
ÖÖ) *
{
ÜÜ 
result
áá 
|=
áá 
(
áá 
bool
áá 
)
áá 
retValue
áá 
;
áá 
}
àà 
}
ââ 
return
ãã 	
result
ãã
 
;
ãã 
}
åå 
private
éé 	
static
éé
 
string
éé 9
+InvokeAssetPostProcessorGenerationCallbacks
éé C
(
ééC D
string
ééD J
name
ééK O
,
ééO P
string
ééQ W
path
ééX \
,
éé\ ]
string
éé^ d
content
éée l
)
éél m
{
èè 
foreach
êê 

(
êê 
var
êê 
method
êê 
in
êê '
GetPostProcessorCallbacks
êê 3
(
êê3 4
name
êê4 8
)
êê8 9
)
êê9 :
{
ëë 
var
íí 
args
íí 
=
íí 
new
íí 
[
íí 
]
íí 
{
íí 
path
íí 
,
íí 
content
íí $
}
íí% &
;
íí& '
var
ìì 
returnValue
ìì 
=
ìì 
method
ìì 
.
ìì 
Invoke
ìì #
(
ìì# $
null
ìì$ (
,
ìì( )
args
ìì* .
)
ìì. /
;
ìì/ 0
if
îî 
(
îî 
method
îî 
.
îî 

ReturnType
îî 
==
îî 
typeof
îî #
(
îî# $
string
îî$ *
)
îî* +
)
îî+ ,
{
ïï 
content
óó 
=
óó 
(
óó 
string
óó 
)
óó 
returnValue
óó "
;
óó" #
}
òò 
}
ôô 
return
õõ 	
content
õõ
 
;
õõ 
}
úú 
private
ûû 	
static
ûû
 
string
ûû "
OnGeneratedCSProject
ûû ,
(
ûû, -
string
ûû- 3
path
ûû4 8
,
ûû8 9
string
ûû: @
content
ûûA H
)
ûûH I
{
üü 
return
†† 	9
+InvokeAssetPostProcessorGenerationCallbacks
††
 5
(
††5 6
nameof
††6 <
(
††< ="
OnGeneratedCSProject
††= Q
)
††Q R
,
††R S
path
††T X
,
††X Y
content
††Z a
)
††a b
;
††b c
}
°° 
private
££ 	
static
££
 
string
££ $
OnGeneratedSlnSolution
££ .
(
££. /
string
££/ 5
path
££6 :
,
££: ;
string
££< B
content
££C J
)
££J K
{
§§ 
return
•• 	9
+InvokeAssetPostProcessorGenerationCallbacks
••
 5
(
••5 6
nameof
••6 <
(
••< =$
OnGeneratedSlnSolution
••= S
)
••S T
,
••T U
path
••V Z
,
••Z [
content
••\ c
)
••c d
;
••d e
}
¶¶ 
private
®® 	
void
®®
 "
SyncFileIfNotChanged
®® #
(
®®# $
string
®®$ *
filename
®®+ 3
,
®®3 4
string
®®5 ;
newContents
®®< G
)
®®G H
{
©© 
try
™™ 
{
´´ 
if
¨¨ 
(
¨¨ 
m_FileIOProvider
¨¨ 
.
¨¨ 
Exists
¨¨ 
(
¨¨  
filename
¨¨  (
)
¨¨( )
&&
¨¨* ,
newContents
¨¨- 8
==
¨¨9 ;
m_FileIOProvider
¨¨< L
.
¨¨L M
ReadAllText
¨¨M X
(
¨¨X Y
filename
¨¨Y a
)
¨¨a b
)
¨¨b c
{
≠≠ 
return
ÆÆ 
;
ÆÆ 
}
ØØ 
}
∞∞ 
catch
±± 
(
±±	 

	Exception
±±
 
	exception
±± 
)
±± 
{
≤≤ 
Debug
≥≥ 	
.
≥≥	 

LogException
≥≥
 
(
≥≥ 
	exception
≥≥  
)
≥≥  !
;
≥≥! "
}
¥¥ 
m_FileIOProvider
∂∂ 
.
∂∂ 
WriteAllText
∂∂  
(
∂∂  !
filename
∂∂! )
,
∂∂) *
newContents
∂∂+ 6
)
∂∂6 7
;
∂∂7 8
}
∑∑ 
private
ππ 	
string
ππ
 
ProjectText
ππ 
(
ππ 
Assembly
ππ %
assembly
ππ& .
,
ππ. /

Dictionary
∫∫ 
<
∫∫ 
string
∫∫ 
,
∫∫ 
string
∫∫ 
>
∫∫ #
allAssetsProjectParts
∫∫ 3
,
∫∫3 4
IEnumerable
ªª 
<
ªª 
ResponseFileData
ªª 
>
ªª  
responseFilesData
ªª! 2
,
ªª2 3
List
ºº 
<
ºº 
Assembly
ºº 
>
ºº "
allProjectAssemblies
ºº &
,
ºº& '
string
ΩΩ 	
[
ΩΩ	 

]
ΩΩ
 $
roslynAnalyzerDllPaths
ΩΩ "
)
ΩΩ" #
{
ææ 
var
øø 
projectBuilder
øø 
=
øø 
new
øø 
StringBuilder
øø )
(
øø) *
ProjectHeader
øø* 7
(
øø7 8
assembly
øø8 @
,
øø@ A
responseFilesData
øøB S
,
øøS T$
roslynAnalyzerDllPaths
øøU k
)
øøk l
)
øøl m
;
øøm n
var
¿¿ 

references
¿¿ 
=
¿¿ 
new
¿¿ 
List
¿¿ 
<
¿¿ 
string
¿¿ #
>
¿¿# $
(
¿¿$ %
)
¿¿% &
;
¿¿& '
projectBuilder
¬¬ 
.
¬¬ 
Append
¬¬ 
(
¬¬ 
$str
¬¬ )
)
¬¬) *
.
¬¬* +
Append
¬¬+ 1
(
¬¬1 2
k_WindowsNewline
¬¬2 B
)
¬¬B C
;
¬¬C D
foreach
√√ 

(
√√ 
string
√√ 
file
√√ 
in
√√ 
assembly
√√ #
.
√√# $
sourceFiles
√√$ /
)
√√/ 0
{
ƒƒ 
if
≈≈ 
(
≈≈ 
!
≈≈ 	
IsSupportedFile
≈≈	 
(
≈≈ 
file
≈≈ 
)
≈≈ 
)
≈≈ 
continue
∆∆ 
;
∆∆ 
var
»» 
	extension
»» 
=
»» 
Path
»» 
.
»» 
GetExtension
»» %
(
»»% &
file
»»& *
)
»»* +
.
»»+ ,
ToLower
»», 3
(
»»3 4
)
»»4 5
;
»»5 6
var
…… 
fullFile
…… 
=
…… $
EscapedRelativePathFor
…… )
(
……) *
file
……* .
)
……. /
;
……/ 0
if
   
(
   
$str
   
!=
   
	extension
   
)
   
{
ÀÀ 
projectBuilder
ÃÃ 
.
ÃÃ 
Append
ÃÃ 
(
ÃÃ 
$str
ÃÃ 4
)
ÃÃ4 5
.
ÃÃ5 6
Append
ÃÃ6 <
(
ÃÃ< =
fullFile
ÃÃ= E
)
ÃÃE F
.
ÃÃF G
Append
ÃÃG M
(
ÃÃM N
$str
ÃÃN U
)
ÃÃU V
.
ÃÃV W
Append
ÃÃW ]
(
ÃÃ] ^
k_WindowsNewline
ÃÃ^ n
)
ÃÃn o
;
ÃÃo p
}
ÕÕ 
else
ŒŒ 
{
œœ 

references
–– 
.
–– 
Add
–– 
(
–– 
fullFile
–– 
)
–– 
;
–– 
}
—— 
}
““ 
projectBuilder
”” 
.
”” 
Append
”” 
(
”” 
$str
”” *
)
””* +
.
””+ ,
Append
””, 2
(
””2 3
k_WindowsNewline
””3 C
)
””C D
;
””D E
projectBuilder
’’ 
.
’’ 
Append
’’ 
(
’’ 
$str
’’ )
)
’’) *
.
’’* +
Append
’’+ 1
(
’’1 2
k_WindowsNewline
’’2 B
)
’’B C
;
’’C D
if
ÿÿ 
(
ÿÿ #
allAssetsProjectParts
ÿÿ 
.
ÿÿ 
TryGetValue
ÿÿ (
(
ÿÿ( )
assembly
ÿÿ) 1
.
ÿÿ1 2
name
ÿÿ2 6
,
ÿÿ6 7
out
ÿÿ8 ;
var
ÿÿ< ?(
additionalAssetsForProject
ÿÿ@ Z
)
ÿÿZ [
)
ÿÿ[ \
projectBuilder
ŸŸ 
.
ŸŸ 
Append
ŸŸ 
(
ŸŸ (
additionalAssetsForProject
ŸŸ 4
)
ŸŸ4 5
;
ŸŸ5 6
var
€€ 
responseRefs
€€ 
=
€€ 
responseFilesData
€€ '
.
€€' (

SelectMany
€€( 2
(
€€2 3
x
€€3 4
=>
€€5 7
x
€€8 9
.
€€9 : 
FullPathReferences
€€: L
.
€€L M
Select
€€M S
(
€€S T
r
€€T U
=>
€€V X
r
€€Y Z
)
€€Z [
)
€€[ \
;
€€\ ]
var
‹‹ (
internalAssemblyReferences
‹‹ !
=
‹‹" #
assembly
‹‹$ ,
.
‹‹, - 
assemblyReferences
‹‹- ?
.
›› 
Where
›› 
(
›› 
i
›› 
=>
›› 
!
›› 
i
›› 
.
›› 
sourceFiles
›› 
.
››  
Any
››  #
(
››# $(
ShouldFileBePartOfSolution
››$ >
)
››> ?
)
››? @
.
››@ A
Select
››A G
(
››G H
i
››H I
=>
››J L
i
››M N
.
››N O

outputPath
››O Y
)
››Y Z
;
››Z [
var
ﬁﬁ 
allReferences
ﬁﬁ 
=
ﬁﬁ 
assembly
ﬂﬂ 
.
ﬂﬂ (
compiledAssemblyReferences
ﬂﬂ (
.
‡‡ 
Union
‡‡ 

(
‡‡
 
responseRefs
‡‡ 
)
‡‡ 
.
·· 
Union
·· 

(
··
 

references
·· 
)
·· 
.
‚‚ 
Union
‚‚ 

(
‚‚
 (
internalAssemblyReferences
‚‚ %
)
‚‚% &
;
‚‚& '
foreach
‰‰ 

(
‰‰ 
var
‰‰ 
	reference
‰‰ 
in
‰‰ 
allReferences
‰‰ *
)
‰‰* +
{
ÂÂ 
string
ÊÊ 

fullReference
ÊÊ 
=
ÊÊ 
Path
ÊÊ 
.
ÊÊ  
IsPathRooted
ÊÊ  ,
(
ÊÊ, -
	reference
ÊÊ- 6
)
ÊÊ6 7
?
ÊÊ8 9
	reference
ÊÊ: C
:
ÊÊD E
Path
ÊÊF J
.
ÊÊJ K
Combine
ÊÊK R
(
ÊÊR S
ProjectDirectory
ÊÊS c
,
ÊÊc d
	reference
ÊÊe n
)
ÊÊn o
;
ÊÊo p
AppendReference
ÁÁ 
(
ÁÁ 
fullReference
ÁÁ !
,
ÁÁ! "
projectBuilder
ÁÁ# 1
)
ÁÁ1 2
;
ÁÁ2 3
}
ËË 
projectBuilder
ÍÍ 
.
ÍÍ 
Append
ÍÍ 
(
ÍÍ 
$str
ÍÍ *
)
ÍÍ* +
.
ÍÍ+ ,
Append
ÍÍ, 2
(
ÍÍ2 3
k_WindowsNewline
ÍÍ3 C
)
ÍÍC D
;
ÍÍD E
if
ÏÏ 
(
ÏÏ 
$num
ÏÏ 
<
ÏÏ	 

assembly
ÏÏ 
.
ÏÏ  
assemblyReferences
ÏÏ &
.
ÏÏ& '
Length
ÏÏ' -
)
ÏÏ- .
{
ÌÌ 
projectBuilder
ÓÓ 
.
ÓÓ 
Append
ÓÓ 
(
ÓÓ 
$str
ÓÓ )
)
ÓÓ) *
.
ÓÓ* +
Append
ÓÓ+ 1
(
ÓÓ1 2
k_WindowsNewline
ÓÓ2 B
)
ÓÓB C
;
ÓÓC D
foreach
ÔÔ 
(
ÔÔ 
Assembly
ÔÔ 
	reference
ÔÔ 
in
ÔÔ  "
assembly
ÔÔ# +
.
ÔÔ+ , 
assemblyReferences
ÔÔ, >
.
ÔÔ> ?
Where
ÔÔ? D
(
ÔÔD E
i
ÔÔE F
=>
ÔÔG I
i
ÔÔJ K
.
ÔÔK L
sourceFiles
ÔÔL W
.
ÔÔW X
Any
ÔÔX [
(
ÔÔ[ \(
ShouldFileBePartOfSolution
ÔÔ\ v
)
ÔÔv w
)
ÔÔw x
)
ÔÔx y
{
 
projectBuilder
ÒÒ 
.
ÒÒ 
Append
ÒÒ 
(
ÒÒ 
$str
ÒÒ =
)
ÒÒ= >
.
ÒÒ> ?
Append
ÒÒ? E
(
ÒÒE F
	reference
ÒÒF O
.
ÒÒO P
name
ÒÒP T
)
ÒÒT U
.
ÒÒU V
Append
ÒÒV \
(
ÒÒ\ ]!
GetProjectExtension
ÒÒ] p
(
ÒÒp q
)
ÒÒq r
)
ÒÒr s
.
ÒÒs t
Append
ÒÒt z
(
ÒÒz {
$strÒÒ{ Ä
)ÒÒÄ Å
.ÒÒÅ Ç
AppendÒÒÇ à
(ÒÒà â 
k_WindowsNewlineÒÒâ ô
)ÒÒô ö
;ÒÒö õ
projectBuilder
ÚÚ 
.
ÚÚ 
Append
ÚÚ 
(
ÚÚ 
$str
ÚÚ -
)
ÚÚ- .
.
ÚÚ. /
Append
ÚÚ/ 5
(
ÚÚ5 6
ProjectGuid
ÚÚ6 A
(
ÚÚA B
	reference
ÚÚB K
)
ÚÚK L
)
ÚÚL M
.
ÚÚM N
Append
ÚÚN T
(
ÚÚT U
$str
ÚÚU b
)
ÚÚb c
.
ÚÚc d
Append
ÚÚd j
(
ÚÚj k
k_WindowsNewline
ÚÚk {
)
ÚÚ{ |
;
ÚÚ| }
projectBuilder
ÛÛ 
.
ÛÛ 
Append
ÛÛ 
(
ÛÛ 
$str
ÛÛ )
)
ÛÛ) *
.
ÛÛ* +
Append
ÛÛ+ 1
(
ÛÛ1 2
	reference
ÛÛ2 ;
.
ÛÛ; <
name
ÛÛ< @
)
ÛÛ@ A
.
ÛÛA B
Append
ÛÛB H
(
ÛÛH I
$str
ÛÛI R
)
ÛÛR S
.
ÛÛS T
Append
ÛÛT Z
(
ÛÛZ [
k_WindowsNewline
ÛÛ[ k
)
ÛÛk l
;
ÛÛl m
projectBuilder
ÙÙ 
.
ÙÙ 
Append
ÙÙ 
(
ÙÙ 
$str
ÙÙ 4
)
ÙÙ4 5
.
ÙÙ5 6
Append
ÙÙ6 <
(
ÙÙ< =
k_WindowsNewline
ÙÙ= M
)
ÙÙM N
;
ÙÙN O
}
ıı 
projectBuilder
˜˜ 
.
˜˜ 
Append
˜˜ 
(
˜˜ 
$str
˜˜ +
)
˜˜+ ,
.
˜˜, -
Append
˜˜- 3
(
˜˜3 4
k_WindowsNewline
˜˜4 D
)
˜˜D E
;
˜˜E F
}
¯¯ 
projectBuilder
˙˙ 
.
˙˙ 
Append
˙˙ 
(
˙˙ 
ProjectFooter
˙˙ &
(
˙˙& '
)
˙˙' (
)
˙˙( )
;
˙˙) *
return
˚˚ 	
projectBuilder
˚˚
 
.
˚˚ 
ToString
˚˚ !
(
˚˚! "
)
˚˚" #
;
˚˚# $
}
¸¸ 
private
˛˛ 	
static
˛˛
 
string
˛˛ 
XmlFilename
˛˛ #
(
˛˛# $
string
˛˛$ *
path
˛˛+ /
)
˛˛/ 0
{
ˇˇ 
if
ÄÄ 
(
ÄÄ 
string
ÄÄ 
.
ÄÄ 
IsNullOrEmpty
ÄÄ 
(
ÄÄ 
path
ÄÄ  
)
ÄÄ  !
)
ÄÄ! "
return
ÅÅ 

path
ÅÅ 
;
ÅÅ 
path
ÉÉ 
=
ÉÉ 	
path
ÉÉ
 
.
ÉÉ 
Replace
ÉÉ 
(
ÉÉ 
$str
ÉÉ 
,
ÉÉ 
$str
ÉÉ "
)
ÉÉ" #
;
ÉÉ# $
path
ÑÑ 
=
ÑÑ 	
path
ÑÑ
 
.
ÑÑ 
Replace
ÑÑ 
(
ÑÑ 
$str
ÑÑ 
,
ÑÑ 
$str
ÑÑ "
)
ÑÑ" #
;
ÑÑ# $
return
ÜÜ 	
	XmlEscape
ÜÜ
 
(
ÜÜ 
path
ÜÜ 
)
ÜÜ 
;
ÜÜ 
}
áá 
private
ââ 	
static
ââ
 
string
ââ 
	XmlEscape
ââ !
(
ââ! "
string
ââ" (
s
ââ) *
)
ââ* +
{
ää 
return
ãã 	
SecurityElement
ãã
 
.
ãã 
Escape
ãã  
(
ãã  !
s
ãã! "
)
ãã" #
;
ãã# $
}
åå 
private
éé 	
void
éé
 
AppendReference
éé 
(
éé 
string
éé %
fullReference
éé& 3
,
éé3 4
StringBuilder
éé5 B
projectBuilder
ééC Q
)
ééQ R
{
èè 
var
êê 
escapedFullPath
êê 
=
êê $
EscapedRelativePathFor
êê /
(
êê/ 0
fullReference
êê0 =
)
êê= >
;
êê> ?
projectBuilder
ëë 
.
ëë 
Append
ëë 
(
ëë 
$str
ëë 4
)
ëë4 5
.
ëë5 6
Append
ëë6 <
(
ëë< =
Path
ëë= A
.
ëëA B)
GetFileNameWithoutExtension
ëëB ]
(
ëë] ^
escapedFullPath
ëë^ m
)
ëëm n
)
ëën o
.
ëëo p
Append
ëëp v
(
ëëv w
$str
ëëw |
)
ëë| }
.
ëë} ~
Appendëë~ Ñ
(ëëÑ Ö 
k_WindowsNewlineëëÖ ï
)ëëï ñ
;ëëñ ó
projectBuilder
íí 
.
íí 
Append
íí 
(
íí 
$str
íí +
)
íí+ ,
.
íí, -
Append
íí- 3
(
íí3 4
escapedFullPath
íí4 C
)
ííC D
.
ííD E
Append
ííE K
(
ííK L
$str
ííL Y
)
ííY Z
.
ííZ [
Append
íí[ a
(
íía b
k_WindowsNewline
ííb r
)
íír s
;
íís t
projectBuilder
ìì 
.
ìì 
Append
ìì 
(
ìì 
$str
ìì +
)
ìì+ ,
.
ìì, -
Append
ìì- 3
(
ìì3 4
k_WindowsNewline
ìì4 D
)
ììD E
;
ììE F
}
îî 
public
ññ 
string
ññ	 
ProjectFile
ññ 
(
ññ 
Assembly
ññ $
assembly
ññ% -
)
ññ- .
{
óó 
return
òò 	
Path
òò
 
.
òò 
Combine
òò 
(
òò 
ProjectDirectory
òò '
,
òò' (
$"
òò) +
{
òò+ ,$
m_AssemblyNameProvider
òò, B
.
òòB C
GetAssemblyName
òòC R
(
òòR S
assembly
òòS [
.
òò[ \

outputPath
òò\ f
,
òòf g
assembly
òòh p
.
òòp q
name
òòq u
)
òòu v
}
òòv w
.csproj
òòw ~
"
òò~ 
)òò Ä
;òòÄ Å
}
ôô 
private
õõ 	
static
õõ
 
readonly
õõ 
Regex
õõ +
InvalidCharactersRegexPattern
õõ  =
=
õõ> ?
new
õõ@ C
Regex
õõD I
(
õõI J
$str
õõJ g
+
õõh i
(
õõj k 
VisualStudioEditor
õõk }
.
õõ} ~
	IsWindowsõõ~ á
?õõà â
$strõõä å
:õõç é
$strõõè ì
)õõì î
)õõî ï
;õõï ñ
public
úú 
string
úú	 
SolutionFile
úú 
(
úú 
)
úú 
{
ùù 
return
ûû 	
Path
ûû
 
.
ûû 
Combine
ûû 
(
ûû 
FileUtility
ûû "
.
ûû" #
	Normalize
ûû# ,
(
ûû, -
ProjectDirectory
ûû- =
)
ûû= >
,
ûû> ?
$"
ûû@ B
{
ûûB C+
InvalidCharactersRegexPattern
ûûC `
.
ûû` a
Replace
ûûa h
(
ûûh i
m_ProjectName
ûûi v
,
ûûv w
$str
ûûx {
)
ûû{ |
}
ûû| }
.slnûû} Å
"ûûÅ Ç
)ûûÇ É
;ûûÉ Ñ
}
üü 
internal
°° 

string
°° 
VsConfigFile
°° 
(
°° 
)
°°  
{
¢¢ 
return
££ 	
Path
££
 
.
££ 
Combine
££ 
(
££ 
FileUtility
££ "
.
££" #
	Normalize
££# ,
(
££, -
ProjectDirectory
££- =
)
££= >
,
££> ?
$str
££@ K
)
££K L
;
££L M
}
§§ 
private
¶¶ 	
string
¶¶
 
ProjectHeader
¶¶ 
(
¶¶ 
Assembly
ßß 
assembly
ßß 
,
ßß 
IEnumerable
®® 
<
®® 
ResponseFileData
®® 
>
®®  
responseFilesData
®®! 2
,
®®2 3
string
©© 	
[
©©	 

]
©©
 $
roslynAnalyzerDllPaths
©© "
)
™™ 
{
´´ 
var
¨¨ 
toolsVersion
¨¨ 
=
¨¨ 
$str
¨¨ 
;
¨¨ 
var
≠≠ 
productVersion
≠≠ 
=
≠≠ 
$str
≠≠ $
;
≠≠$ %
const
ÆÆ 
string
ÆÆ	 
baseDirectory
ÆÆ 
=
ÆÆ 
$str
ÆÆ  #
;
ÆÆ# $
var
∞∞ $
targetFrameworkVersion
∞∞ 
=
∞∞ 
$str
∞∞  (
;
∞∞( )
var
±± #
targetLanguageVersion
±± 
=
±± 
$str
±± '
;
±±' (
if
≥≥ 
(
≥≥ #
m_CurrentInstallation
≥≥ 
!=
≥≥ 
null
≥≥  $
&&
≥≥% '#
m_CurrentInstallation
≥≥( =
.
≥≥= >
SupportsCSharp8
≥≥> M
)
≥≥M N
{
¥¥ 
}
ºº 
var
ææ 
projectType
ææ 
=
ææ 
ProjectTypeOf
ææ "
(
ææ" #
assembly
ææ# +
.
ææ+ ,
name
ææ, 0
)
ææ0 1
;
ææ1 2
var
¿¿ 
	arguments
¿¿ 
=
¿¿ 
new
¿¿ 
object
¿¿ 
[
¿¿ 
]
¿¿ 
{
¡¡ 
toolsVersion
¬¬ 
,
¬¬ 
productVersion
√√ 
,
√√ 
ProjectGuid
ƒƒ 
(
ƒƒ 
assembly
ƒƒ 
)
ƒƒ 
,
ƒƒ 
XmlFilename
≈≈ 
(
≈≈ 
FileUtility
≈≈ 
.
≈≈ 
	Normalize
≈≈ %
(
≈≈% &#
InternalEditorUtility
≈≈& ;
.
≈≈; <#
GetEngineAssemblyPath
≈≈< Q
(
≈≈Q R
)
≈≈R S
)
≈≈S T
)
≈≈T U
,
≈≈U V
XmlFilename
∆∆ 
(
∆∆ 
FileUtility
∆∆ 
.
∆∆ 
	Normalize
∆∆ %
(
∆∆% &#
InternalEditorUtility
∆∆& ;
.
∆∆; <#
GetEditorAssemblyPath
∆∆< Q
(
∆∆Q R
)
∆∆R S
)
∆∆S T
)
∆∆T U
,
∆∆U V
string
«« 

.
««
 
Join
«« 
(
«« 
$str
«« 
,
«« 
assembly
«« 
.
«« 
defines
«« %
.
««% &
Concat
««& ,
(
««, -
responseFilesData
««- >
.
««> ?

SelectMany
««? I
(
««I J
x
««J K
=>
««L N
x
««O P
.
««P Q
Defines
««Q X
)
««X Y
)
««Y Z
.
««Z [
Distinct
««[ c
(
««c d
)
««d e
.
««e f
ToArray
««f m
(
««m n
)
««n o
)
««o p
,
««p q!
MSBuildNamespaceUri
»» 
,
»» 
assembly
…… 
.
…… 
name
…… 
,
…… 
assembly
   
.
   

outputPath
   
,
   
GetRootNamespace
ÀÀ 
(
ÀÀ 
assembly
ÀÀ 
)
ÀÀ 
,
ÀÀ $
targetFrameworkVersion
ÃÃ 
,
ÃÃ #
targetLanguageVersion
ÕÕ 
,
ÕÕ 
baseDirectory
ŒŒ 
,
ŒŒ 
assembly
œœ 
.
œœ 
compilerOptions
œœ 
.
œœ 
AllowUnsafeCode
œœ ,
|
œœ- .
responseFilesData
œœ/ @
.
œœ@ A
Any
œœA D
(
œœD E
x
œœE F
=>
œœG I
x
œœJ K
.
œœK L
Unsafe
œœL R
)
œœR S
,
œœS T
projectType
—— 
+
—— 
$str
—— !
+
——" #
(
——$ %
int
——% (
)
——( )
projectType
——) 4
,
——4 5%
EditorUserBuildSettings
““ 
.
““ 
activeBuildTarget
““ -
+
““. /
$str
““0 3
+
““4 5
(
““6 7
int
““7 :
)
““: ;%
EditorUserBuildSettings
““; R
.
““R S
activeBuildTarget
““S d
,
““d e
Application
”” 
.
”” 
unityVersion
”” 
,
”” %
VisualStudioIntegration
‘‘ 
.
‘‘ 
PackageVersion
‘‘ *
(
‘‘* +
)
‘‘+ ,
}
’’ 
;
’’ 
try
◊◊ 
{
ÿÿ 
return
⁄⁄ 
string
⁄⁄ 
.
⁄⁄ 
Format
⁄⁄ $
(
⁄⁄$ %&
GetProjectHeaderTemplate
⁄⁄% =
(
⁄⁄= >$
roslynAnalyzerDllPaths
⁄⁄> T
,
⁄⁄T U
assembly
⁄⁄V ^
.
⁄⁄^ _
compilerOptions
⁄⁄_ n
.
⁄⁄n o(
RoslynAnalyzerRulesetPath⁄⁄o à
)⁄⁄à â
,⁄⁄â ä
	arguments⁄⁄ã î
)⁄⁄î ï
;⁄⁄ï ñ
}
ﬁﬁ 
catch
ﬂﬂ 
(
ﬂﬂ	 

	Exception
ﬂﬂ
 
)
ﬂﬂ 
{
‡‡ 
throw
·· 	
new
··
 #
NotSupportedException
·· #
(
··# $
$str··$ ñ
+··ó ò
	arguments··ô ¢
.··¢ £
Length··£ ©
)··© ™
;··™ ´
}
‚‚ 
}
„„ 
private
ÂÂ 	
enum
ÂÂ
 
ProjectType
ÂÂ 
{
ÊÊ 
GamePlugins
ÁÁ 
=
ÁÁ 
$num
ÁÁ 
,
ÁÁ 
Game
ËË 
=
ËË 	
$num
ËË
 
,
ËË 
EditorPlugins
ÈÈ 
=
ÈÈ 
$num
ÈÈ 
,
ÈÈ 
Editor
ÍÍ 	
=
ÍÍ
 
$num
ÍÍ 
,
ÍÍ 
}
ÎÎ 
private
ÌÌ 	
static
ÌÌ
 
ProjectType
ÌÌ 
ProjectTypeOf
ÌÌ *
(
ÌÌ* +
string
ÌÌ+ 1
fileName
ÌÌ2 :
)
ÌÌ: ;
{
ÓÓ 
var
ÔÔ 
plugins
ÔÔ 
=
ÔÔ 
fileName
ÔÔ 
.
ÔÔ 
Contains
ÔÔ "
(
ÔÔ" #
$str
ÔÔ# .
)
ÔÔ. /
;
ÔÔ/ 0
var
 
editor
 
=
 
fileName
 
.
 
Contains
 !
(
! "
$str
" *
)
* +
;
+ ,
if
ÚÚ 
(
ÚÚ 
plugins
ÚÚ 
&&
ÚÚ 
editor
ÚÚ 
)
ÚÚ 
return
ÛÛ 

ProjectType
ÛÛ 
.
ÛÛ 
EditorPlugins
ÛÛ $
;
ÛÛ$ %
if
ÙÙ 
(
ÙÙ 
plugins
ÙÙ 
)
ÙÙ 
return
ıı 

ProjectType
ıı 
.
ıı 
GamePlugins
ıı "
;
ıı" #
if
ˆˆ 
(
ˆˆ 
editor
ˆˆ 
)
ˆˆ 
return
˜˜ 

ProjectType
˜˜ 
.
˜˜ 
Editor
˜˜ 
;
˜˜ 
return
˘˘ 	
ProjectType
˘˘
 
.
˘˘ 
Game
˘˘ 
;
˘˘ 
}
˙˙ 
private
¸¸ 	
static
¸¸
 
string
¸¸ 
GetSolutionText
¸¸ '
(
¸¸' (
)
¸¸( )
{
˝˝ 
return
˛˛ 	
string
˛˛
 
.
˛˛ 
Join
˛˛ 
(
˛˛ 
$str
˛˛ 
,
˛˛ 
$str
ˇˇ 
,
ˇˇ 
$str
ÄÄ ?
,
ÄÄ? @
$str
ÅÅ 
,
ÅÅ 
$str
ÇÇ 	
,
ÇÇ	 

$str
ÉÉ 
,
ÉÉ 
$str
ÑÑ E
,
ÑÑE F
$str
ÖÖ +
,
ÖÖ+ ,
$str
ÜÜ /
,
ÜÜ/ 0
$str
áá 
,
áá 
$str
àà E
,
ààE F
$str
ââ 	
,
ââ	 

$str
ää 
,
ää 
$str
ãã 	
,
ãã	 

$str
åå 
,
åå 
$str
çç 
)
çç 
.
çç 
Replace
çç 
(
çç 
$str
çç 
,
çç 
$str
çç 
)
çç 
;
çç 
}
éé 
private
êê 	
static
êê
 
string
êê &
GetProjectFooterTemplate
êê 0
(
êê0 1
)
êê1 2
{
ëë 
return
íí 	
string
íí
 
.
íí 
Join
íí 
(
íí 
$str
íí 
,
íí 
$str
ìì K
,
ììK L
$str
îî C
,
îîC D
$str
ïï j
,
ïïj k
$str
ññ P
,
ññP Q
$str
óó %
,
óó% &
$str
òò 
,
òò 
$str
ôô $
,
ôô$ %
$str
öö 
,
öö 
$str
õõ 
,
õõ 
$str
úú 
,
úú 
$str
ùù 
)
ùù 
;
ùù 
}
ûû 
private
†† 	
string
††
 &
GetProjectHeaderTemplate
†† )
(
††) *
string
††* 0
[
††0 1
]
††1 2$
roslynAnalyzerDllPaths
††3 I
,
††I J
string
††K Q'
roslynAnalyzerRulesetPath
††R k
)
††k l
{
°° 
var
¢¢ 
header
¢¢ 
=
¢¢ 
new
¢¢ 
[
¢¢ 
]
¢¢ 
{
££ 
$str
§§ 1
,
§§1 2
$str
•• L
,
••L M
$str
¶¶ 
,
¶¶ 
$str
ßß *
,
ßß* +
$str
®® 
,
®® 
$str
©© 
,
©© 
$str
™™ X
,
™™X Y
$str
´´ J
,
´´J K
$str
¨¨ /
,
¨¨/ 0
$str
≠≠ -
,
≠≠- .
$str
ÆÆ -
,
ÆÆ- .
$str
ØØ -
,
ØØ- .
$str
∞∞ +
,
∞∞+ ,
$str
±± <
,
±±< =
$str
≤≤ +
,
≤≤+ ,
$str
≥≥ @
,
≥≥@ A
$str
¥¥ -
,
¥¥- .
$str
µµ .
,
µµ. /
$str
∂∂ 
,
∂∂ 
$str
∑∑ Y
,
∑∑Y Z
$str
∏∏ ,
,
∏∏, -
$str
ππ &
,
ππ& '
$str
∫∫ %
,
∫∫% &
$str
ªª '
,
ªª' (
$str
ºº 1
,
ºº1 2
$str
ΩΩ ,
,
ΩΩ, -
$str
ææ )
,
ææ) *
$str
øø  
,
øø  !
$str
¿¿ 6
,
¿¿6 7
$str
¡¡ 
,
¡¡ 
$str
¬¬ [
,
¬¬[ \
$str
√√ )
,
√√) *
$str
ƒƒ $
,
ƒƒ$ %
$str
≈≈ 5
,
≈≈5 6
$str
∆∆ ,
,
∆∆, -
$str
«« )
,
««) *
$str
»»  
,
»»  !
$str
…… 6
,
……6 7
$str
   
}
ÀÀ 
;
ÀÀ 
var
ÕÕ %
forceExplicitReferences
ÕÕ 
=
ÕÕ  
new
ÕÕ! $
[
ÕÕ$ %
]
ÕÕ% &
{
ŒŒ 
$str
œœ 
,
œœ 
$str
–– $
,
––$ %
$str
—— $
,
——$ %
$str
““ c
,
““c d
$str
”” Y
,
””Y Z
$str
‘‘ W
,
‘‘W X
$str
’’ 
}
÷÷ 
;
÷÷ 
var
ÿÿ 
	flavoring
ÿÿ 
=
ÿÿ 
new
ÿÿ 
[
ÿÿ 
]
ÿÿ 
{
ŸŸ 
$str
⁄⁄ 
,
⁄⁄ 
$str€€ Å
,€€Å Ç
$str
‹‹ A
,
‹‹A B
$str
›› L
,
››L M
$str
ﬁﬁ 4
,
ﬁﬁ4 5
$str
ﬂﬂ 4
,
ﬂﬂ4 5
$str
‡‡ ,
,
‡‡, -
$str
·· 
}
‚‚ 
;
‚‚ 
var
‰‰ 
footer
‰‰ 
=
‰‰ 
new
‰‰ 
[
‰‰ 
]
‰‰ 
{
ÂÂ 
$str
ÊÊ 
}
ÁÁ 
;
ÁÁ 
var
ÈÈ 
lines
ÈÈ 
=
ÈÈ 
header
ÈÈ 
.
ÈÈ 
Concat
ÈÈ 
(
ÈÈ %
forceExplicitReferences
ÈÈ 4
)
ÈÈ4 5
.
ÈÈ5 6
Concat
ÈÈ6 <
(
ÈÈ< =
	flavoring
ÈÈ= F
)
ÈÈF G
.
ÈÈG H
ToList
ÈÈH N
(
ÈÈN O
)
ÈÈO P
;
ÈÈP Q
if
ÏÏ 
(
ÏÏ #
m_CurrentInstallation
ÏÏ 
!=
ÏÏ 
null
ÏÏ  $
&&
ÏÏ% '#
m_CurrentInstallation
ÏÏ( =
.
ÏÏ= >
SupportsAnalyzers
ÏÏ> O
)
ÏÏO P
{
ÌÌ 
if
ÔÔ 
(
ÔÔ '
roslynAnalyzerRulesetPath
ÔÔ -
!=
ÔÔ. 0
null
ÔÔ1 5
)
ÔÔ5 6
{
 
lines
ÒÒ 
.
ÒÒ 
Add
ÒÒ 
(
ÒÒ 
$str
ÒÒ 2
)
ÒÒ2 3
;
ÒÒ3 4
lines
ÚÚ 
.
ÚÚ 
Add
ÚÚ 
(
ÚÚ 
$"
ÚÚ  '
    <CodeAnalysisRuleSet>
ÚÚ  9
{
ÚÚ9 :'
roslynAnalyzerRulesetPath
ÚÚ: S
}
ÚÚS T$
</CodeAnalysisRuleSet>
ÚÚT j
"
ÚÚj k
)
ÚÚk l
;
ÚÚl m
lines
ÛÛ 
.
ÛÛ 
Add
ÛÛ 
(
ÛÛ 
$str
ÛÛ 3
)
ÛÛ3 4
;
ÛÛ4 5
}
ÙÙ 
string
˜˜ 

[
˜˜
 
]
˜˜ 
	analyzers
˜˜ 
=
˜˜ #
m_CurrentInstallation
˜˜ .
.
˜˜. /
GetAnalyzers
˜˜/ ;
(
˜˜; <
)
˜˜< =
;
˜˜= >
string
¯¯ 

[
¯¯
 
]
¯¯ 
allAnalyzers
¯¯ 
=
¯¯ 
	analyzers
¯¯ %
!=
¯¯& (
null
¯¯) -
?
¯¯. /
	analyzers
¯¯0 9
.
¯¯9 :
Concat
¯¯: @
(
¯¯@ A$
roslynAnalyzerDllPaths
¯¯A W
)
¯¯W X
.
¯¯X Y
ToArray
¯¯Y `
(
¯¯` a
)
¯¯a b
:
¯¯c d$
roslynAnalyzerDllPaths
¯¯e {
;
¯¯{ |
if
˙˙ 
(
˙˙ 
allAnalyzers
˙˙ 
.
˙˙ 
Any
˙˙ 
(
˙˙ 
)
˙˙ 
)
˙˙ 
{
˚˚ 
lines
¸¸ 

.
¸¸
 
Add
¸¸ 
(
¸¸ 
$str
¸¸ 
)
¸¸  
;
¸¸  !
foreach
˝˝ 
(
˝˝ 
var
˝˝ 
analyzer
˝˝ 
in
˝˝ 
allAnalyzers
˝˝ *
)
˝˝* +
{
˛˛ 
lines
ˇˇ 
.
ˇˇ 
Add
ˇˇ 
(
ˇˇ 
$@"
ˇˇ &
    <Analyzer Include=""
ˇˇ +
{
ˇˇ+ ,$
EscapedRelativePathFor
ˇˇ, B
(
ˇˇB C
analyzer
ˇˇC K
)
ˇˇK L
}
ˇˇL M
"" />
ˇˇM R
"
ˇˇR S
)
ˇˇS T
;
ˇˇT U
}
ÄÄ 
lines
ÅÅ 

.
ÅÅ
 
Add
ÅÅ 
(
ÅÅ 
$str
ÅÅ  
)
ÅÅ  !
;
ÅÅ! "
}
ÇÇ 
}
ÉÉ 
return
ÖÖ 	
string
ÖÖ
 
.
ÖÖ 
Join
ÖÖ 
(
ÖÖ 
$str
ÖÖ 
,
ÖÖ 
lines
ÖÖ #
.
ÖÖ# $
Concat
ÖÖ$ *
(
ÖÖ* +
footer
ÖÖ+ 1
)
ÖÖ1 2
)
ÖÖ2 3
;
ÖÖ3 4
}
ÜÜ 
private
àà 	
void
àà
 
SyncSolution
àà 
(
àà 
IEnumerable
àà '
<
àà' (
Assembly
àà( 0
>
àà0 1

assemblies
àà2 <
)
àà< =
{
ââ 
if
ää 
(
ää +
InvalidCharactersRegexPattern
ää $
.
ää$ %
IsMatch
ää% ,
(
ää, -
ProjectDirectory
ää- =
)
ää= >
)
ää> ?
Debug
ãã 	
.
ãã	 


LogWarning
ãã
 
(
ãã 
$str
ãã q
)
ããq r
;
ããr s
var
çç 
solutionFile
çç 
=
çç 
SolutionFile
çç "
(
çç" #
)
çç# $
;
çç$ %
var
éé 
previousSolution
éé 
=
éé 
m_FileIOProvider
éé *
.
éé* +
Exists
éé+ 1
(
éé1 2
solutionFile
éé2 >
)
éé> ?
?
éé@ A
SolutionParser
ééB P
.
ééP Q
ParseSolutionFile
ééQ b
(
ééb c
solutionFile
ééc o
,
ééo p
m_FileIOProviderééq Å
)ééÅ Ç
:ééÉ Ñ
nullééÖ â
;ééâ ä*
SyncSolutionFileIfNotChanged
èè 
(
èè  
solutionFile
èè  ,
,
èè, -
SolutionText
èè. :
(
èè: ;

assemblies
èè; E
,
èèE F
previousSolution
èèG W
)
èèW X
)
èèX Y
;
èèY Z
}
êê 
private
íí 	
string
íí
 
SolutionText
íí 
(
íí 
IEnumerable
íí )
<
íí) *
Assembly
íí* 2
>
íí2 3

assemblies
íí4 >
,
íí> ?
Solution
íí@ H
previousSolution
ííI Y
=
ííZ [
null
íí\ `
)
íí` a
{
ìì 
const
îî 
string
îî	 
fileversion
îî 
=
îî 
$str
îî %
;
îî% &
const
ïï 
string
ïï	 
	vsversion
ïï 
=
ïï 
$str
ïï  
;
ïï  !
var
óó  
relevantAssemblies
óó 
=
óó '
RelevantAssembliesForMode
óó 5
(
óó5 6

assemblies
óó6 @
)
óó@ A
;
óóA B
var
òò 
generatedProjects
òò 
=
òò 
ToProjectEntries
òò +
(
òò+ , 
relevantAssemblies
òò, >
)
òò> ?
.
òò? @
ToList
òò@ F
(
òòF G
)
òòG H
;
òòH I 
SolutionProperties
öö 
[
öö 
]
öö 

properties
öö "
=
öö# $
null
öö% )
;
öö) *
var
ùù 
projects
ùù 
=
ùù 
new
ùù 
List
ùù 
<
ùù "
SolutionProjectEntry
ùù /
>
ùù/ 0
(
ùù0 1
)
ùù1 2
;
ùù2 3
projects
ûû 
.
ûû 
AddRange
ûû 
(
ûû 
generatedProjects
ûû &
)
ûû& '
;
ûû' (
if
†† 
(
†† 
previousSolution
†† 
!=
†† 
null
†† 
)
††  
{
°° 
var
££ 
externalProjects
££ 
=
££ 
previousSolution
££ +
.
££+ ,
Projects
££, 4
.
§§ 
Where
§§ 
(
§§ 
p
§§ 
=>
§§ 
p
§§ 
.
§§ ,
IsSolutionFolderProjectFactory
§§ 1
(
§§1 2
)
§§2 3
||
§§4 6
!
§§7 8
FileUtility
§§8 C
.
§§C D&
IsFileInProjectDirectory
§§D \
(
§§\ ]
p
§§] ^
.
§§^ _
FileName
§§_ g
)
§§g h
)
§§h i
.
•• 
Where
•• 
(
•• 
p
•• 
=>
•• 
generatedProjects
•• "
.
••" #
All
••# &
(
••& '
gp
••' )
=>
••* ,
gp
••- /
.
••/ 0
FileName
••0 8
!=
••9 ;
p
••< =
.
••= >
FileName
••> F
)
••F G
)
••G H
;
••H I
projects
ßß 
.
ßß 
AddRange
ßß 
(
ßß 
externalProjects
ßß &
)
ßß& '
;
ßß' (

properties
®® 
=
®® 
previousSolution
®® !
.
®®! "

Properties
®®" ,
;
®®, -
}
©© 
string
´´ 	
propertiesText
´´
 
=
´´ 
GetPropertiesText
´´ ,
(
´´, -

properties
´´- 7
)
´´7 8
;
´´8 9
string
¨¨ 	 
projectEntriesText
¨¨
 
=
¨¨ #
GetProjectEntriesText
¨¨ 4
(
¨¨4 5
projects
¨¨5 =
)
¨¨= >
;
¨¨> ?
var
ØØ "
configurableProjects
ØØ 
=
ØØ 
projects
ØØ &
.
ØØ& '
Where
ØØ' ,
(
ØØ, -
p
ØØ- .
=>
ØØ/ 1
!
ØØ2 3
p
ØØ3 4
.
ØØ4 5,
IsSolutionFolderProjectFactory
ØØ5 S
(
ØØS T
)
ØØT U
)
ØØU V
;
ØØV W
string
∞∞ 	'
projectConfigurationsText
∞∞
 #
=
∞∞$ %
string
∞∞& ,
.
∞∞, -
Join
∞∞- 1
(
∞∞1 2
k_WindowsNewline
∞∞2 B
,
∞∞B C"
configurableProjects
∞∞D X
.
∞∞X Y
Select
∞∞Y _
(
∞∞_ `
p
∞∞` a
=>
∞∞b d-
GetProjectActiveConfigurations∞∞e É
(∞∞É Ñ
p∞∞Ñ Ö
.∞∞Ö Ü
ProjectGuid∞∞Ü ë
)∞∞ë í
)∞∞í ì
.∞∞ì î
ToArray∞∞î õ
(∞∞õ ú
)∞∞ú ù
)∞∞ù û
;∞∞û ü
return
≤≤ 	
string
≤≤
 
.
≤≤ 
Format
≤≤ 
(
≤≤ 
GetSolutionText
≤≤ '
(
≤≤' (
)
≤≤( )
,
≤≤) *
fileversion
≤≤+ 6
,
≤≤6 7
	vsversion
≤≤8 A
,
≤≤A B 
projectEntriesText
≤≤C U
,
≤≤U V'
projectConfigurationsText
≤≤W p
,
≤≤p q
propertiesText≤≤r Ä
)≤≤Ä Å
;≤≤Å Ç
}
≥≥ 
private
µµ 	
static
µµ
 
IEnumerable
µµ 
<
µµ 
Assembly
µµ %
>
µµ% &'
RelevantAssembliesForMode
µµ' @
(
µµ@ A
IEnumerable
µµA L
<
µµL M
Assembly
µµM U
>
µµU V

assemblies
µµW a
)
µµa b
{
∂∂ 
return
∑∑ 	

assemblies
∑∑
 
.
∑∑ 
Where
∑∑ 
(
∑∑ 
i
∑∑ 
=>
∑∑ 
ScriptingLanguage
∑∑  1
.
∑∑1 2
CSharp
∑∑2 8
==
∑∑9 ;"
ScriptingLanguageFor
∑∑< P
(
∑∑P Q
i
∑∑Q R
)
∑∑R S
)
∑∑S T
;
∑∑T U
}
∏∏ 
private
∫∫ 	
static
∫∫
 
string
∫∫ 
GetPropertiesText
∫∫ )
(
∫∫) * 
SolutionProperties
∫∫* <
[
∫∫< =
]
∫∫= >
array
∫∫? D
)
∫∫D E
{
ªª 
if
ºº 
(
ºº 
array
ºº 
==
ºº 
null
ºº 
||
ºº 
array
ºº 
.
ºº 
Length
ºº $
==
ºº% '
$num
ºº( )
)
ºº) *
{
ΩΩ 
array
øø 	
=
øø
 
new
øø  
SolutionProperties
øø "
[
øø" #
]
øø# $
{
øø% &
new
¿¿  
SolutionProperties
¿¿	 
(
¿¿ 
)
¿¿ 
{
¿¿ 
Name
¡¡ 

=
¡¡ 
$str
¡¡ !
,
¡¡! "
Type
¬¬ 

=
¬¬ 
$str
¬¬ 
,
¬¬ 
Entries
√√ 
=
√√ 
new
√√ 
List
√√ 
<
√√ 
KeyValuePair
√√ %
<
√√% &
string
√√& ,
,
√√, -
string
√√- 3
>
√√3 4
>
√√4 5
(
√√5 6
)
√√6 7
{
√√8 9
new
√√: =
KeyValuePair
√√> J
<
√√J K
string
√√K Q
,
√√Q R
string
√√S Y
>
√√Y Z
(
√√[ \
$str
√√\ n
,
√√n o
$str
√√p w
)
√√w x
}
√√y z
}
ƒƒ 
}
≈≈ 
;
≈≈ 
}
∆∆ 
var
«« 
result
«« 
=
«« 
new
«« 
StringBuilder
«« !
(
««! "
)
««" #
;
««# $
for
…… 
(
…… 
var
…… 
i
…… 
=
…… 
$num
…… 
;
…… 
i
…… 
<
…… 
array
…… 
.
…… 
Length
…… #
;
……# $
i
……% &
++
……& (
)
……( )
{
   
if
ÀÀ 
(
ÀÀ 
i
ÀÀ 	
>
ÀÀ
 
$num
ÀÀ 
)
ÀÀ 
result
ÃÃ 
.
ÃÃ 
Append
ÃÃ 
(
ÃÃ 
k_WindowsNewline
ÃÃ #
)
ÃÃ# $
;
ÃÃ$ %
var
ŒŒ 

properties
ŒŒ 
=
ŒŒ 
array
ŒŒ 
[
ŒŒ 
i
ŒŒ 
]
ŒŒ 
;
ŒŒ 
result
–– 

.
––
 
Append
–– 
(
–– 
$"
–– 
\tGlobalSection(
–– $
{
––$ %

properties
––% /
.
––/ 0
Name
––0 4
}
––4 5
) = 
––5 9
{
––9 :

properties
––: D
.
––D E
Type
––E I
}
––I J
"
––J K
)
––K L
;
––L M
result
—— 

.
——
 
Append
—— 
(
—— 
k_WindowsNewline
—— "
)
——" #
;
——# $
foreach
”” 
(
”” 
var
”” 
entry
”” 
in
”” 

properties
”” $
.
””$ %
Entries
””% ,
)
””, -
{
‘‘ 
result
’’ 
.
’’ 
Append
’’ 
(
’’ 
$"
’’ 
\t\t
’’ 
{
’’ 
entry
’’ 
.
’’  
Key
’’  #
}
’’# $
 = 
’’$ '
{
’’' (
entry
’’( -
.
’’- .
Value
’’. 3
}
’’3 4
"
’’4 5
)
’’5 6
;
’’6 7
result
÷÷ 
.
÷÷ 
Append
÷÷ 
(
÷÷ 
k_WindowsNewline
÷÷ #
)
÷÷# $
;
÷÷$ %
}
◊◊ 
result
ŸŸ 

.
ŸŸ
 
Append
ŸŸ 
(
ŸŸ 
$str
ŸŸ &
)
ŸŸ& '
;
ŸŸ' (
}
⁄⁄ 
return
‹‹ 	
result
‹‹
 
.
‹‹ 
ToString
‹‹ 
(
‹‹ 
)
‹‹ 
;
‹‹ 
}
›› 
private
„„ 	
string
„„
 #
GetProjectEntriesText
„„ &
(
„„& '
IEnumerable
„„' 2
<
„„2 3"
SolutionProjectEntry
„„3 G
>
„„G H
entries
„„I P
)
„„P Q
{
‰‰ 
var
ÂÂ 
projectEntries
ÂÂ 
=
ÂÂ 
entries
ÂÂ 
.
ÂÂ  
Select
ÂÂ  &
(
ÂÂ& '
entry
ÂÂ' ,
=>
ÂÂ- /
string
ÂÂ0 6
.
ÂÂ6 7
Format
ÂÂ7 =
(
ÂÂ= >,
m_SolutionProjectEntryTemplate
ÊÊ "
,
ÊÊ" #
entry
ÁÁ 	
.
ÁÁ	 
 
ProjectFactoryGuid
ÁÁ
 
,
ÁÁ 
entry
ÁÁ #
.
ÁÁ# $
Name
ÁÁ$ (
,
ÁÁ( )
entry
ÁÁ* /
.
ÁÁ/ 0
FileName
ÁÁ0 8
,
ÁÁ8 9
entry
ÁÁ: ?
.
ÁÁ? @
ProjectGuid
ÁÁ@ K
,
ÁÁK L
entry
ÁÁM R
.
ÁÁR S
Metadata
ÁÁS [
)
ËË 
)
ËË 
;
ËË 
return
ÍÍ 	
string
ÍÍ
 
.
ÍÍ 
Join
ÍÍ 
(
ÍÍ 
k_WindowsNewline
ÍÍ &
,
ÍÍ& '
projectEntries
ÍÍ( 6
.
ÍÍ6 7
ToArray
ÍÍ7 >
(
ÍÍ> ?
)
ÍÍ? @
)
ÍÍ@ A
;
ÍÍA B
}
ÎÎ 
private
ÌÌ 	
IEnumerable
ÌÌ
 
<
ÌÌ "
SolutionProjectEntry
ÌÌ *
>
ÌÌ* +
ToProjectEntries
ÌÌ, <
(
ÌÌ< =
IEnumerable
ÌÌ= H
<
ÌÌH I
Assembly
ÌÌI Q
>
ÌÌQ R

assemblies
ÌÌS ]
)
ÌÌ] ^
{
ÓÓ 
foreach
ÔÔ 

(
ÔÔ 
var
ÔÔ 
assembly
ÔÔ 
in
ÔÔ 

assemblies
ÔÔ &
)
ÔÔ& '
yield
 	
return

 
new
 "
SolutionProjectEntry
 )
(
) *
)
* +
{
ÒÒ  
ProjectFactoryGuid
ÚÚ 
=
ÚÚ 
SolutionGuid
ÚÚ &
(
ÚÚ& '
assembly
ÚÚ' /
)
ÚÚ/ 0
,
ÚÚ0 1
Name
ÛÛ 	
=
ÛÛ
 
assembly
ÛÛ 
.
ÛÛ 
name
ÛÛ 
,
ÛÛ 
FileName
ÙÙ 
=
ÙÙ 
Path
ÙÙ 
.
ÙÙ 
GetFileName
ÙÙ  
(
ÙÙ  !
ProjectFile
ÙÙ! ,
(
ÙÙ, -
assembly
ÙÙ- 5
)
ÙÙ5 6
)
ÙÙ6 7
,
ÙÙ7 8
ProjectGuid
ıı 
=
ıı 
ProjectGuid
ıı 
(
ıı 
assembly
ıı '
)
ıı' (
,
ıı( )
Metadata
ˆˆ 
=
ˆˆ 
k_WindowsNewline
ˆˆ  
}
˜˜ 
;
˜˜ 
}
¯¯ 
private
˝˝ 	
string
˝˝
 ,
GetProjectActiveConfigurations
˝˝ /
(
˝˝/ 0
string
˝˝0 6
projectGuid
˝˝7 B
)
˝˝B C
{
˛˛ 
return
ˇˇ 	
string
ˇˇ
 
.
ˇˇ 
Format
ˇˇ 
(
ˇˇ 4
&m_SolutionProjectConfigurationTemplate
ÄÄ *
,
ÄÄ* +
projectGuid
ÅÅ 
)
ÅÅ 
;
ÅÅ 
}
ÇÇ 
private
ÑÑ 	
string
ÑÑ
 $
EscapedRelativePathFor
ÑÑ '
(
ÑÑ' (
string
ÑÑ( .
file
ÑÑ/ 3
)
ÑÑ3 4
{
ÖÖ 
var
ÜÜ 

projectDir
ÜÜ 
=
ÜÜ 
FileUtility
ÜÜ 
.
ÜÜ  
	Normalize
ÜÜ  )
(
ÜÜ) *
ProjectDirectory
ÜÜ* :
)
ÜÜ: ;
;
ÜÜ; <
file
áá 
=
áá 	
FileUtility
áá
 
.
áá 
	Normalize
áá 
(
áá  
file
áá  $
)
áá$ %
;
áá% &
var
àà 
path
àà 
=
àà 
SkipPathPrefix
àà 
(
àà 
file
àà !
,
àà! "

projectDir
àà# -
)
àà- .
;
àà. /
var
ää 
packageInfo
ää 
=
ää $
m_AssemblyNameProvider
ää +
.
ää+ ,
FindForAssetPath
ää, <
(
ää< =
path
ää= A
.
ääA B
Replace
ääB I
(
ääI J
$char
ääJ N
,
ääN O
$char
ääP S
)
ääS T
)
ääT U
;
ääU V
if
ãã 
(
ãã 
packageInfo
ãã 
!=
ãã 
null
ãã 
)
ãã 
{
åå 
var
èè 
absolutePath
èè 
=
èè 
Path
èè 
.
èè 
GetFullPath
èè '
(
èè' (
FileUtility
èè( 3
.
èè3 4
	Normalize
èè4 =
(
èè= >
path
èè> B
)
èèB C
)
èèC D
;
èèD E
path
êê 
=
êê	 

SkipPathPrefix
êê 
(
êê 
absolutePath
êê &
,
êê& '

projectDir
êê( 2
)
êê2 3
;
êê3 4
}
ëë 
return
ìì 	
XmlFilename
ìì
 
(
ìì 
path
ìì 
)
ìì 
;
ìì 
}
îî 
private
ññ 	
static
ññ
 
string
ññ 
SkipPathPrefix
ññ &
(
ññ& '
string
ññ' -
path
ññ. 2
,
ññ2 3
string
ññ4 :
prefix
ññ; A
)
ññA B
{
óó 
if
òò 
(
òò 
path
òò 
.
òò 

StartsWith
òò 
(
òò 
$"
òò 
{
òò 
prefix
òò  
}
òò  !
{
òò! "
Path
òò" &
.
òò& '$
DirectorySeparatorChar
òò' =
}
òò= >
"
òò> ?
)
òò? @
&&
òòA C
(
òòD E
path
òòE I
.
òòI J
Length
òòJ P
>
òòQ R
prefix
òòS Y
.
òòY Z
Length
òòZ `
)
òò` a
)
òòa b
return
ôô 

path
ôô 
.
ôô 
	Substring
ôô 
(
ôô 
prefix
ôô  
.
ôô  !
Length
ôô! '
+
ôô( )
$num
ôô* +
)
ôô+ ,
;
ôô, -
return
öö 	
path
öö
 
;
öö 
}
õõ 
private
ùù 	
static
ùù
 
string
ùù 
ProjectFooter
ùù %
(
ùù% &
)
ùù& '
{
ûû 
return
üü 	&
GetProjectFooterTemplate
üü
 "
(
üü" #
)
üü# $
;
üü$ %
}
†† 
static
¢¢ 
string
¢¢	 !
GetProjectExtension
¢¢ #
(
¢¢# $
)
¢¢$ %
{
££ 
return
§§ 	
$str
§§
 
;
§§ 
}
•• 
private
ßß 	
string
ßß
 
ProjectGuid
ßß 
(
ßß 
Assembly
ßß %
assembly
ßß& .
)
ßß. /
{
®® 
return
©© 	
m_GUIDGenerator
©©
 
.
©© 
ProjectGuid
©© %
(
©©% &
m_ProjectName
™™ 
,
™™ $
m_AssemblyNameProvider
´´ 
.
´´ 
GetAssemblyName
´´ *
(
´´* +
assembly
´´+ 3
.
´´3 4

outputPath
´´4 >
,
´´> ?
assembly
´´@ H
.
´´H I
name
´´I M
)
´´M N
)
´´N O
;
´´O P
}
¨¨ 
private
ÆÆ 	
string
ÆÆ
 
SolutionGuid
ÆÆ 
(
ÆÆ 
Assembly
ÆÆ &
assembly
ÆÆ' /
)
ÆÆ/ 0
{
ØØ 
return
∞∞ 	
m_GUIDGenerator
∞∞
 
.
∞∞ 
SolutionGuid
∞∞ &
(
∞∞& '
m_ProjectName
∞∞' 4
,
∞∞4 5"
ScriptingLanguageFor
∞∞6 J
(
∞∞J K
assembly
∞∞K S
)
∞∞S T
)
∞∞T U
;
∞∞U V
}
±± 
private
≥≥ 	
static
≥≥
 
string
≥≥ 
GetRootNamespace
≥≥ (
(
≥≥( )
Assembly
≥≥) 1
assembly
≥≥2 :
)
≥≥: ;
{
¥¥ 
return
∂∂ 
assembly
∂∂ 
.
∂∂ 
rootNamespace
∂∂ )
;
∂∂) *
}
∫∫ 
}
ªª 
public
ΩΩ 
static
ΩΩ 
class
ΩΩ #
SolutionGuidGenerator
ΩΩ *
{
ææ 
public
øø 
static
øø	 
string
øø 
GuidForProject
øø %
(
øø% &
string
øø& ,
projectName
øø- 8
)
øø8 9
{
¿¿ 
return
¡¡ 	 
ComputeGuidHashFor
¡¡
 
(
¡¡ 
projectName
¡¡ (
+
¡¡) *
$str
¡¡+ 1
)
¡¡1 2
;
¡¡2 3
}
¬¬ 
public
ƒƒ 
static
ƒƒ	 
string
ƒƒ 
GuidForSolution
ƒƒ &
(
ƒƒ& '
string
ƒƒ' -
projectName
ƒƒ. 9
,
ƒƒ9 :
ScriptingLanguage
ƒƒ; L
language
ƒƒM U
)
ƒƒU V
{
≈≈ 
if
∆∆ 
(
∆∆ 
language
∆∆ 
==
∆∆ 
ScriptingLanguage
∆∆ $
.
∆∆$ %
CSharp
∆∆% +
)
∆∆+ ,
{
«« 
return
…… 

$str
…… 1
;
……1 2
}
   
return
ÃÃ 	 
ComputeGuidHashFor
ÃÃ
 
(
ÃÃ 
projectName
ÃÃ (
)
ÃÃ( )
;
ÃÃ) *
}
ÕÕ 
private
œœ 	
static
œœ
 
string
œœ  
ComputeGuidHashFor
œœ *
(
œœ* +
string
œœ+ 1
input
œœ2 7
)
œœ7 8
{
–– 
var
—— 
hash
—— 
=
—— 
MD5
—— 
.
—— 
Create
—— 
(
—— 
)
—— 
.
—— 
ComputeHash
—— &
(
——& '
Encoding
——' /
.
——/ 0
Default
——0 7
.
——7 8
GetBytes
——8 @
(
——@ A
input
——A F
)
——F G
)
——G H
;
——H I
return
““ 	

HashAsGuid
““
 
(
““ 
HashToString
““ !
(
““! "
hash
““" &
)
““& '
)
““' (
;
““( )
}
”” 
private
’’ 	
static
’’
 
string
’’ 

HashAsGuid
’’ "
(
’’" #
string
’’# )
hash
’’* .
)
’’. /
{
÷÷ 
var
◊◊ 
guid
◊◊ 
=
◊◊ 
hash
◊◊ 
.
◊◊ 
	Substring
◊◊ 
(
◊◊ 
$num
◊◊ 
,
◊◊ 
$num
◊◊  !
)
◊◊! "
+
◊◊# $
$str
◊◊% (
+
◊◊) *
hash
◊◊+ /
.
◊◊/ 0
	Substring
◊◊0 9
(
◊◊9 :
$num
◊◊: ;
,
◊◊; <
$num
◊◊= >
)
◊◊> ?
+
◊◊@ A
$str
◊◊B E
+
◊◊F G
hash
◊◊H L
.
◊◊L M
	Substring
◊◊M V
(
◊◊V W
$num
◊◊W Y
,
◊◊Y Z
$num
◊◊[ \
)
◊◊\ ]
+
◊◊^ _
$str
◊◊` c
+
◊◊d e
hash
◊◊f j
.
◊◊j k
	Substring
◊◊k t
(
◊◊t u
$num
◊◊u w
,
◊◊w x
$num
◊◊y z
)
◊◊z {
+
◊◊| }
$str◊◊~ Å
+◊◊Ç É
hash◊◊Ñ à
.◊◊à â
	Substring◊◊â í
(◊◊í ì
$num◊◊ì ï
,◊◊ï ñ
$num◊◊ó ô
)◊◊ô ö
;◊◊ö õ
return
ÿÿ 	
guid
ÿÿ
 
.
ÿÿ 
ToUpper
ÿÿ 
(
ÿÿ 
)
ÿÿ 
;
ÿÿ 
}
ŸŸ 
private
€€ 	
static
€€
 
string
€€ 
HashToString
€€ $
(
€€$ %
byte
€€% )
[
€€) *
]
€€* +
bs
€€, .
)
€€. /
{
‹‹ 
var
›› 
sb
›› 	
=
››
 
new
›› 
StringBuilder
›› 
(
›› 
)
›› 
;
››  
foreach
ﬁﬁ 

(
ﬁﬁ 
byte
ﬁﬁ 
b
ﬁﬁ 
in
ﬁﬁ 
bs
ﬁﬁ 
)
ﬁﬁ 
sb
ﬂﬂ 
.
ﬂﬂ 
Append
ﬂﬂ 
(
ﬂﬂ 
b
ﬂﬂ 
.
ﬂﬂ 
ToString
ﬂﬂ 
(
ﬂﬂ 
$str
ﬂﬂ 
)
ﬂﬂ 
)
ﬂﬂ 
;
ﬂﬂ  
return
‡‡ 	
sb
‡‡
 
.
‡‡ 
ToString
‡‡ 
(
‡‡ 
)
‡‡ 
;
‡‡ 
}
·· 
}
‚‚ 
}„„ †
ïD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\SolutionProjectEntry.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
internal		 	
class		
  
SolutionProjectEntry		 $
{

 
public 
string	 
ProjectFactoryGuid "
{# $
get% (
;( )
set* -
;- .
}/ 0
public 
string	 
Name 
{ 
get 
; 
set 
;  
}! "
public 
string	 
FileName 
{ 
get 
; 
set  #
;# $
}% &
public 
string	 
ProjectGuid 
{ 
get !
;! "
set# &
;& '
}( )
public 
string	 
Metadata 
{ 
get 
; 
set  #
;# $
}% &
public 
bool	 *
IsSolutionFolderProjectFactory ,
(, -
)- .
{ 
return 	
ProjectFactoryGuid
 
!= 
null  $
&&% '
ProjectFactoryGuid( :
.: ;
Equals; A
(A B
$strB h
,h i
StringComparisonj z
.z {
OrdinalIgnoreCase	{ å
)
å ç
;
ç é
} 
} 
} π
õD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\MessageEventArgs.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
.- .
	Messaging. 7
{ 
internal 	
class
 
MessageEventArgs  
{ 
public		 
Message			 
Message		 
{

 
get 
; 
} 
public 
MessageEventArgs	 
( 
Message !
message" )
)) *
{ 
Message 

= 
message 
; 
} 
} 
} ﬂä
ìD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\VisualStudioEditor.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
[ 
InitializeOnLoad 
] 
public 
class 
VisualStudioEditor  
:! "
IExternalCodeEditor# 6
{ 
private 	
static
 
readonly %
IVisualStudioInstallation 3
[3 4
]4 5
_installations6 D
;D E
internal 

static 
bool 
IsOSX 
=> 
Application  +
.+ ,
platform, 4
==5 7
RuntimePlatform8 G
.G H
	OSXEditorH Q
;Q R
internal 

static 
bool 
	IsWindows  
=>! #
!$ %
IsOSX% *
&&+ -
Path. 2
.2 3"
DirectorySeparatorChar3 I
==J L
FileUtilityM X
.X Y
WinSeparatorY e
&&f h
Environmenti t
.t u
NewLineu |
==} 
$str
Ä Ü
;
Ü á

CodeEditor 
. 
Installation 
[ 
] 
IExternalCodeEditor /
./ 0
Installations0 =
=>> @
_installationsA O
. 
Select 

(
 
i 
=> 
i 
. $
ToCodeEditorInstallation *
(* +
)+ ,
), -
. 
ToArray 
( 
) 
; 
private 	
readonly
 

IGenerator 

_generator (
=) *
new+ .
ProjectGeneration/ @
(@ A
)A B
;B C
static 
VisualStudioEditor	 
( 
) 
{   
try!! 
{"" 
_installations## 
=## 
	Discovery## 
.$$ (
GetVisualStudioInstallations$$ "
($$" #
)$$# $
.%% 
ToArray%% 
(%% 
)%% 
;%% 
}&& 
catch'' 
(''	 

	Exception''
 
ex'' 
)'' 
{(( 
UnityEngine)) 
.)) 
Debug)) 
.)) 
LogError)) 
()) 
$")) !9
-Error detecting Visual Studio installations: ))! N
{))N O
ex))O Q
}))Q R
"))R S
)))S T
;))T U
_installations** 
=** 
Array** 
.** 
Empty**  
<**  !$
VisualStudioInstallation**! 9
>**9 :
(**: ;
)**; <
;**< =
}++ 

CodeEditor-- 
.-- 
Register-- 
(-- 
new-- 
VisualStudioEditor-- -
(--- .
)--. /
)--/ 0
;--0 1
}.. 
internal00 

static00 
bool00 
	IsEnabled00  
{11 
get22 
{33 
return44 


CodeEditor44 
.44 
CurrentEditor44 #
is44$ &
VisualStudioEditor44' 9
;449 :
}55 
}66 
public88 
void88	 
CreateIfDoesntExist88 !
(88! "
)88" #
{99 
if:: 
(:: 
!:: 

_generator:: 
.:: $
HasSolutionBeenGenerated:: +
(::+ ,
)::, -
)::- .

_generator;; 
.;; 
Sync;; 
(;; 
);; 
;;; 
}<< 
public>> 
void>>	 

Initialize>> 
(>> 
string>> "
editorInstallationPath>>  6
)>>6 7
{?? 
}@@ 
internalBB 

virtualBB 
boolBB 1
%TryGetVisualStudioInstallationForPathBB =
(BB= >
stringBB> D

editorPathBBE O
,BBO P
outBBQ T%
IVisualStudioInstallationBBU n
installationBBo {
)BB{ |
{CC 
foreachEE 

(EE 
varEE 
	candidateEE 
inEE 
_installationsEE +
)EE+ ,
{FF 
ifGG 
(GG 
!GG 	
stringGG	 
.GG 
EqualsGG 
(GG 
PathGG 
.GG 
GetFullPathGG '
(GG' (

editorPathGG( 2
)GG2 3
,GG3 4
PathGG5 9
.GG9 :
GetFullPathGG: E
(GGE F
	candidateGGF O
.GGO P
PathGGP T
)GGT U
,GGU V
StringComparisonGGW g
.GGg h
OrdinalIgnoreCaseGGh y
)GGy z
)GGz {
continueHH 
;HH 
installationJJ 
=JJ 
	candidateJJ 
;JJ 
returnKK 

trueKK 
;KK 
}LL 
returnNN 	
	DiscoveryNN
 
.NN #
TryDiscoverInstallationNN +
(NN+ ,

editorPathNN, 6
,NN6 7
outNN8 ;
installationNN< H
)NNH I
;NNI J
}OO 
publicQQ 
virtualQQ	 
boolQQ %
TryGetInstallationForPathQQ /
(QQ/ 0
stringQQ0 6

editorPathQQ7 A
,QQA B
outQQC F

CodeEditorQQG Q
.QQQ R
InstallationQQR ^
installationQQ_ k
)QQk l
{RR 
varSS 
resultSS 
=SS 1
%TryGetVisualStudioInstallationForPathSS 5
(SS5 6

editorPathSS6 @
,SS@ A
outSSB E
varSSF I
vsiSSJ M
)SSM N
;SSN O
installationTT 
=TT 
vsiTT 
==TT 
nullTT 
?TT 
defaultTT  '
:TT( )
vsiTT* -
.TT- .$
ToCodeEditorInstallationTT. F
(TTF G
)TTG H
;TTH I
returnUU 	
resultUU
 
;UU 
}VV 
publicXX 
voidXX	 
OnGUIXX 
(XX 
)XX 
{YY 
	GUILayoutZZ 
.ZZ 
BeginHorizontalZZ 
(ZZ 
)ZZ 
;ZZ 
	GUILayout[[ 
.[[ 
FlexibleSpace[[ 
([[ 
)[[ 
;[[ 
var]] 
package]] 
=]] 
UnityEditor]] 
.]] 
PackageManager]] +
.]]+ ,
PackageInfo]], 7
.]]7 8
FindForAssembly]]8 G
(]]G H
GetType]]H O
(]]O P
)]]P Q
.]]Q R
Assembly]]R Z
)]]Z [
;]][ \
var__ 
style__ 
=__ 
new__ 
GUIStyle__ 
{`` 
richTextaa 
=aa 
trueaa 
,aa 
marginbb 

=bb 
newbb 

RectOffsetbb 
(bb 
$numbb 
,bb 
$numbb  
,bb  !
$numbb" #
,bb# $
$numbb% &
)bb& '
}cc 
;cc 
	GUILayoutee 
.ee 
Labelee 
(ee 
$"ee !
<size=10><color=grey>ee *
{ee* +
packageee+ 2
.ee2 3
displayNameee3 >
}ee> ?
 vee? A
{eeA B
packageeeB I
.eeI J
versioneeJ Q
}eeQ R#
 enabled</color></size>eeR i
"eei j
,eej k
styleeel q
)eeq r
;eer s
	GUILayoutff 
.ff 
EndHorizontalff 
(ff 
)ff 
;ff 
EditorGUILayouthh 
.hh 

LabelFieldhh 
(hh 
$strhh ;
)hh; <
;hh< =
	EditorGUIii 
.ii 
indentLevelii 
++ii 
;ii 
SettingsButtonjj 
(jj !
ProjectGenerationFlagjj '
.jj' (
Embeddedjj( 0
,jj0 1
$strjj2 E
,jjE F
$strjjG I
)jjI J
;jjJ K
SettingsButtonkk 
(kk !
ProjectGenerationFlagkk '
.kk' (
Localkk( -
,kk- .
$strkk/ ?
,kk? @
$strkkA C
)kkC D
;kkD E
SettingsButtonll 
(ll !
ProjectGenerationFlagll '
.ll' (
Registryll( 0
,ll0 1
$strll2 E
,llE F
$strllG I
)llI J
;llJ K
SettingsButtonmm 
(mm !
ProjectGenerationFlagmm '
.mm' (
Gitmm( +
,mm+ ,
$strmm- ;
,mm; <
$strmm= ?
)mm? @
;mm@ A
SettingsButtonnn 
(nn !
ProjectGenerationFlagnn '
.nn' (
BuiltInnn( /
,nn/ 0
$strnn1 D
,nnD E
$strnnF H
)nnH I
;nnI J
SettingsButtonoo 
(oo !
ProjectGenerationFlagoo '
.oo' (
LocalTarBalloo( 4
,oo4 5
$stroo6 E
,ooE F
$strooG I
)ooI J
;ooJ K
SettingsButtonpp 
(pp !
ProjectGenerationFlagpp '
.pp' (
Unknownpp( /
,pp/ 0
$strpp1 P
,ppP Q
$strppR T
)ppT U
;ppU V
SettingsButtonqq 
(qq !
ProjectGenerationFlagqq '
.qq' (
PlayerAssembliesqq( 8
,qq8 9
$strqq: K
,qqK L
$str	qqM ™
)
qq™ ´
;
qq´ ¨"
RegenerateProjectFilesrr 
(rr 
)rr 
;rr 
	EditorGUIss 
.ss 
indentLevelss 
--ss 
;ss 
}tt 
voidvv "
RegenerateProjectFilesvv 
(vv 
)vv 
{ww 
varxx 
rectxx 
=xx 
	EditorGUIxx 
.xx 
IndentedRectxx $
(xx$ %
EditorGUILayoutxx% 4
.xx4 5
GetControlRectxx5 C
(xxC D
newxxD G
GUILayoutOptionxxH W
[xxW X
]xxX Y
{xxZ [
}xx\ ]
)xx] ^
)xx^ _
;xx_ `
rectyy 
.yy 
widthyy 
=yy 
$numyy 
;yy 
ifzz 
(zz 
GUIzz 

.zz
 
Buttonzz 
(zz 
rectzz 
,zz 
$strzz 2
)zz2 3
)zz3 4
{{{ 

_generator|| 
.|| 
Sync|| 
(|| 
)|| 
;|| 
}}} 
}~~ 
void
ÄÄ 
SettingsButton
ÄÄ 
(
ÄÄ #
ProjectGenerationFlag
ÄÄ +

preference
ÄÄ, 6
,
ÄÄ6 7
string
ÄÄ8 >

guiMessage
ÄÄ? I
,
ÄÄI J
string
ÄÄK Q
toolTip
ÄÄR Y
)
ÄÄY Z
{
ÅÅ 
var
ÇÇ 
	prevValue
ÇÇ 
=
ÇÇ 

_generator
ÇÇ 
.
ÇÇ "
AssemblyNameProvider
ÇÇ 2
.
ÇÇ2 3#
ProjectGenerationFlag
ÇÇ3 H
.
ÇÇH I
HasFlag
ÇÇI P
(
ÇÇP Q

preference
ÇÇQ [
)
ÇÇ[ \
;
ÇÇ\ ]
var
ÉÉ 
newValue
ÉÉ 
=
ÉÉ 
EditorGUILayout
ÉÉ !
.
ÉÉ! "
Toggle
ÉÉ" (
(
ÉÉ( )
new
ÉÉ) ,

GUIContent
ÉÉ- 7
(
ÉÉ7 8

guiMessage
ÉÉ8 B
,
ÉÉB C
toolTip
ÉÉD K
)
ÉÉK L
,
ÉÉL M
	prevValue
ÉÉN W
)
ÉÉW X
;
ÉÉX Y
if
ÑÑ 
(
ÑÑ 
newValue
ÑÑ 
!=
ÑÑ 
	prevValue
ÑÑ 
)
ÑÑ 
{
ÖÖ 

_generator
ÜÜ 
.
ÜÜ "
AssemblyNameProvider
ÜÜ #
.
ÜÜ# $%
ToggleProjectGeneration
ÜÜ$ ;
(
ÜÜ; <

preference
ÜÜ< F
)
ÜÜF G
;
ÜÜG H
}
áá 
}
àà 
public
ää 
void
ää	 
SyncIfNeeded
ää 
(
ää 
string
ää !
[
ää! "
]
ää" #

addedFiles
ää$ .
,
ää. /
string
ää0 6
[
ää6 7
]
ää7 8
deletedFiles
ää9 E
,
ääE F
string
ääG M
[
ääM N
]
ääN O

movedFiles
ääP Z
,
ääZ [
string
ää\ b
[
ääb c
]
ääc d
movedFromFiles
ääe s
,
ääs t
string
ääu {
[
ää{ |
]
ää| }
importedFilesää~ ã
)ääã å
{
ãã 

_generator
åå 
.
åå 
SyncIfNeeded
åå 
(
åå 

addedFiles
åå %
.
åå% &
Union
åå& +
(
åå+ ,
deletedFiles
åå, 8
)
åå8 9
.
åå9 :
Union
åå: ?
(
åå? @

movedFiles
åå@ J
)
ååJ K
.
ååK L
Union
ååL Q
(
ååQ R
movedFromFiles
ååR `
)
åå` a
,
ååa b
importedFiles
ååc p
)
ååp q
;
ååq r
foreach
éé 

(
éé 
var
éé 
file
éé 
in
éé 
importedFiles
éé %
.
éé% &
Where
éé& +
(
éé+ ,
a
éé, -
=>
éé. 0
Path
éé1 5
.
éé5 6
GetExtension
éé6 B
(
ééB C
a
ééC D
)
ééD E
==
ééF H
$str
ééI O
)
ééO P
)
ééP Q
{
èè 
var
êê 
pdbFile
êê 
=
êê 
FileUtility
êê 
.
êê 
GetAssetFullPath
êê .
(
êê. /
file
êê/ 3
)
êê3 4
;
êê4 5
if
ìì 
(
ìì 
pdbFile
ìì 
.
ìì 
IndexOf
ìì 
(
ìì 
$"
ìì 
{
ìì 
Path
ìì 
.
ìì  $
DirectorySeparatorChar
ìì  6
}
ìì6 7

com.unity.
ìì7 A
"
ììA B
,
ììB C
StringComparison
ììD T
.
ììT U
OrdinalIgnoreCase
ììU f
)
ììf g
>
ììh i
$num
ììj k
)
ììk l
continue
îî 
;
îî 
var
ññ 
asmFile
ññ 
=
ññ 
Path
ññ 
.
ññ 
ChangeExtension
ññ &
(
ññ& '
pdbFile
ññ' .
,
ññ. /
$str
ññ0 6
)
ññ6 7
;
ññ7 8
if
óó 
(
óó 
!
óó 	
File
óó	 
.
óó 
Exists
óó 
(
óó 
asmFile
óó 
)
óó 
||
óó  
!
óó! "
Image
óó" '
.
óó' (

IsAssembly
óó( 2
(
óó2 3
asmFile
óó3 :
)
óó: ;
)
óó; <
continue
òò 
;
òò 
if
öö 
(
öö 
Symbols
öö 
.
öö "
IsPortableSymbolFile
öö $
(
öö$ %
pdbFile
öö% ,
)
öö, -
)
öö- .
continue
õõ 
;
õõ 
UnityEngine
ùù 
.
ùù 
Debug
ùù 
.
ùù 

LogWarning
ùù  
(
ùù  !
$"
ùù! #F
8Unity is only able to load mdb or portable-pdb symbols. 
ùù# [
{
ùù[ \
file
ùù\ `
}
ùù` a,
 is using a legacy pdb format.
ùùa 
"ùù Ä
)ùùÄ Å
;ùùÅ Ç
}
ûû 
}
üü 
public
°° 
void
°°	 
SyncAll
°° 
(
°° 
)
°° 
{
¢¢ 
AssetDatabase
££ 
.
££ 
Refresh
££ 
(
££ 
)
££ 
;
££ 

_generator
§§ 
.
§§ 
Sync
§§ 
(
§§ 
)
§§ 
;
§§ 
}
•• 
bool
ßß 
IsSupportedPath
ßß 
(
ßß 
string
ßß 
path
ßß "
)
ßß" #
{
®® 
if
™™ 
(
™™ 
string
™™ 
.
™™ 
IsNullOrEmpty
™™ 
(
™™ 
path
™™  
)
™™  !
)
™™! "
return
´´ 

true
´´ 
;
´´ 
if
∞∞ 
(
∞∞ 

_generator
∞∞ 
.
∞∞ 
IsSupportedFile
∞∞ !
(
∞∞! "
path
∞∞" &
)
∞∞& '
)
∞∞' (
return
±± 

true
±± 
;
±± 
return
≥≥ 	
false
≥≥
 
;
≥≥ 
}
¥¥ 
private
∂∂ 	
static
∂∂
 
void
∂∂ ,
CheckCurrentEditorInstallation
∂∂ 4
(
∂∂4 5
)
∂∂5 6
{
∑∑ 
var
∏∏ 

editorPath
∏∏ 
=
∏∏ 

CodeEditor
∏∏ 
.
∏∏ '
CurrentEditorInstallation
∏∏ 8
;
∏∏8 9
try
ππ 
{
∫∫ 
if
ªª 
(
ªª 
	Discovery
ªª 
.
ªª %
TryDiscoverInstallation
ªª )
(
ªª) *

editorPath
ªª* 4
,
ªª4 5
out
ªª6 9
_
ªª: ;
)
ªª; <
)
ªª< =
return
ºº 
;
ºº 
}
ΩΩ 
catch
ææ 
(
ææ	 

IOException
ææ
 
)
ææ 
{
øø 
}
¿¿ 
UnityEngine
¬¬ 
.
¬¬ 
Debug
¬¬ 
.
¬¬ 

LogWarning
¬¬ 
(
¬¬  
$"
¬¬  "'
Visual Studio executable 
¬¬" ;
{
¬¬; <

editorPath
¬¬< F
}
¬¬F Ga
R is not found. Please change your settings in Edit > Preferences > External Tools.¬¬G ô
"¬¬ô ö
)¬¬ö õ
;¬¬õ ú
}
√√ 
public
≈≈ 
bool
≈≈	 
OpenProject
≈≈ 
(
≈≈ 
string
≈≈  
path
≈≈! %
,
≈≈% &
int
≈≈' *
line
≈≈+ /
,
≈≈/ 0
int
≈≈1 4
column
≈≈5 ;
)
≈≈; <
{
∆∆ ,
CheckCurrentEditorInstallation
«« !
(
««! "
)
««" #
;
««# $
if
…… 
(
…… 
!
…… 
IsSupportedPath
…… 
(
…… 
path
…… 
)
…… 
)
…… 
return
   

false
   
;
   
if
ÃÃ 
(
ÃÃ 
!
ÃÃ #
IsProjectGeneratedFor
ÃÃ 
(
ÃÃ 
path
ÃÃ "
,
ÃÃ" #
out
ÃÃ$ '
var
ÃÃ( +
missingFlag
ÃÃ, 7
)
ÃÃ7 8
)
ÃÃ8 9
UnityEngine
ÕÕ 
.
ÕÕ 
Debug
ÕÕ 
.
ÕÕ 

LogWarning
ÕÕ  
(
ÕÕ  !
$"
ÕÕ! #%
You are trying to open 
ÕÕ# :
{
ÕÕ: ;
path
ÕÕ; ?
}
ÕÕ? @“
¬ outside a generated project. This might cause problems with IntelliSense and debugging. To avoid this, you can change your .csproj preferences in Edit > Preferences > External Tools and enable ÕÕ@ Ç
{ÕÕÇ É3
#GetProjectGenerationFlagDescriptionÕÕÉ ¶
(ÕÕ¶ ß
missingFlagÕÕß ≤
)ÕÕ≤ ≥
}ÕÕ≥ ¥
 generation.ÕÕ¥ ¿
"ÕÕ¿ ¡
)ÕÕ¡ ¬
;ÕÕ¬ √
if
œœ 
(
œœ 
IsOSX
œœ 
)
œœ 
return
–– 


OpenOSXApp
–– 
(
–– 
path
–– 
,
–– 
line
––  
,
––  !
column
––" (
)
––( )
;
––) *
if
““ 
(
““ 
	IsWindows
““ 
)
““ 
return
”” 

OpenWindowsApp
”” 
(
”” 
path
”” 
,
”” 
line
””  $
)
””$ %
;
””% &
return
’’ 	
false
’’
 
;
’’ 
}
÷÷ 
private
ÿÿ 	
static
ÿÿ
 
string
ÿÿ 1
#GetProjectGenerationFlagDescription
ÿÿ ;
(
ÿÿ; <#
ProjectGenerationFlag
ÿÿ< Q
flag
ÿÿR V
)
ÿÿV W
{
ŸŸ 
switch
⁄⁄ 	
(
⁄⁄
 
flag
⁄⁄ 
)
⁄⁄ 
{
€€ 
case
‹‹ #
ProjectGenerationFlag
‹‹	 
.
‹‹ 
BuiltIn
‹‹ &
:
‹‹& '
return
›› 
$str
›› 
;
››  
case
ﬁﬁ #
ProjectGenerationFlag
ﬁﬁ	 
.
ﬁﬁ 
Embedded
ﬁﬁ '
:
ﬁﬁ' (
return
ﬂﬂ 
$str
ﬂﬂ 
;
ﬂﬂ  
case
‡‡ #
ProjectGenerationFlag
‡‡	 
.
‡‡ 
Git
‡‡ "
:
‡‡" #
return
·· 
$str
·· 
;
·· 
case
‚‚ #
ProjectGenerationFlag
‚‚	 
.
‚‚ 
Local
‚‚ $
:
‚‚$ %
return
„„ 
$str
„„ 
;
„„ 
case
‰‰ #
ProjectGenerationFlag
‰‰	 
.
‰‰ 
LocalTarBall
‰‰ +
:
‰‰+ ,
return
ÂÂ 
$str
ÂÂ 
;
ÂÂ 
case
ÊÊ #
ProjectGenerationFlag
ÊÊ	 
.
ÊÊ 
PlayerAssemblies
ÊÊ /
:
ÊÊ/ 0
return
ÁÁ 
$str
ÁÁ 
;
ÁÁ 
case
ËË #
ProjectGenerationFlag
ËË	 
.
ËË 
Registry
ËË '
:
ËË' (
return
ÈÈ 
$str
ÈÈ 
;
ÈÈ  
case
ÍÍ #
ProjectGenerationFlag
ÍÍ	 
.
ÍÍ 
Unknown
ÍÍ &
:
ÍÍ& '
return
ÎÎ 
$str
ÎÎ +
;
ÎÎ+ ,
case
ÏÏ #
ProjectGenerationFlag
ÏÏ	 
.
ÏÏ 
None
ÏÏ #
:
ÏÏ# $
default
ÌÌ 
:
ÌÌ 
return
ÓÓ 
string
ÓÓ 
.
ÓÓ 
Empty
ÓÓ 
;
ÓÓ 
}
ÔÔ 
}
 
private
ÚÚ 	
bool
ÚÚ
 #
IsProjectGeneratedFor
ÚÚ $
(
ÚÚ$ %
string
ÚÚ% +
path
ÚÚ, 0
,
ÚÚ0 1
out
ÚÚ2 5#
ProjectGenerationFlag
ÚÚ6 K
missingFlag
ÚÚL W
)
ÚÚW X
{
ÛÛ 
missingFlag
ÙÙ 
=
ÙÙ #
ProjectGenerationFlag
ÙÙ &
.
ÙÙ& '
None
ÙÙ' +
;
ÙÙ+ ,
if
˜˜ 
(
˜˜ 
string
˜˜ 
.
˜˜ 
IsNullOrEmpty
˜˜ 
(
˜˜ 
path
˜˜  
)
˜˜  !
)
˜˜! "
return
¯¯ 

true
¯¯ 
;
¯¯ 
if
˚˚ 
(
˚˚ 
ProjectGeneration
˚˚ 
.
˚˚ "
ScriptingLanguageFor
˚˚ -
(
˚˚- .
path
˚˚. 2
)
˚˚2 3
!=
˚˚4 6
ScriptingLanguage
˚˚7 H
.
˚˚H I
CSharp
˚˚I O
)
˚˚O P
return
¸¸ 

true
¸¸ 
;
¸¸ 
var
ˇˇ 
basePath
ˇˇ 
=
ˇˇ 

_generator
ˇˇ 
.
ˇˇ 
ProjectDirectory
ˇˇ -
;
ˇˇ- .
var
ÄÄ 
relativePath
ÄÄ 
=
ÄÄ 
FileUtility
ÄÄ !
.
ÅÅ $
NormalizeWindowsToUnix
ÅÅ 
(
ÅÅ 
path
ÅÅ  
)
ÅÅ  !
.
ÇÇ 
Replace
ÇÇ 
(
ÇÇ 
basePath
ÇÇ 
,
ÇÇ 
string
ÇÇ 
.
ÇÇ 
Empty
ÇÇ #
)
ÇÇ# $
.
ÉÉ 
Trim
ÉÉ 	
(
ÉÉ	 

FileUtility
ÉÉ
 
.
ÉÉ 
UnixSeparator
ÉÉ #
)
ÉÉ# $
;
ÉÉ$ %
var
ÖÖ 
packageInfo
ÖÖ 
=
ÖÖ 
UnityEditor
ÖÖ  
.
ÖÖ  !
PackageManager
ÖÖ! /
.
ÖÖ/ 0
PackageInfo
ÖÖ0 ;
.
ÖÖ; <
FindForAssetPath
ÖÖ< L
(
ÖÖL M
relativePath
ÖÖM Y
)
ÖÖY Z
;
ÖÖZ [
if
ÜÜ 
(
ÜÜ 
packageInfo
ÜÜ 
==
ÜÜ 
null
ÜÜ 
)
ÜÜ 
return
áá 

true
áá 
;
áá 
var
ââ 
source
ââ 
=
ââ 
packageInfo
ââ 
.
ââ 
source
ââ "
;
ââ" #
if
ää 
(
ää 
!
ää 
Enum
ää 
.
ää 
TryParse
ää 
<
ää #
ProjectGenerationFlag
ää +
>
ää+ ,
(
ää, -
source
ää- 3
.
ää3 4
ToString
ää4 <
(
ää< =
)
ää= >
,
ää> ?
out
ää@ C
var
ääD G
flag
ääH L
)
ääL M
)
ääM N
return
ãã 

true
ãã 
;
ãã 
if
çç 
(
çç 

_generator
çç 
.
çç "
AssemblyNameProvider
çç &
.
çç& '#
ProjectGenerationFlag
çç' <
.
çç< =
HasFlag
çç= D
(
ççD E
flag
ççE I
)
ççI J
)
ççJ K
return
éé 

true
éé 
;
éé 
missingFlag
ëë 
=
ëë 
flag
ëë 
;
ëë 
return
íí 	
false
íí
 
;
íí 
}
ìì 
private
ïï 	
bool
ïï
 
OpenWindowsApp
ïï 
(
ïï 
string
ïï $
path
ïï% )
,
ïï) *
int
ïï+ .
line
ïï/ 3
)
ïï3 4
{
ññ 
var
óó 
progpath
óó 
=
óó 
FileUtility
óó 
.
òò &
FindPackageAssetFullPath
òò 
(
òò 
$str
òò 9
,
òò9 :
$str
òò; O
)
òòO P
.
ôô 
FirstOrDefault
ôô 
(
ôô 
)
ôô 
;
ôô 
if
õõ 
(
õõ 
string
õõ 
.
õõ  
IsNullOrWhiteSpace
õõ  
(
õõ  !
progpath
õõ! )
)
õõ) *
)
õõ* +
return
úú 

false
úú 
;
úú 
string
ûû 	
absolutePath
ûû
 
=
ûû 
$str
ûû 
;
ûû 
if
üü 
(
üü 
!
üü 
string
üü 
.
üü  
IsNullOrWhiteSpace
üü !
(
üü! "
path
üü" &
)
üü& '
)
üü' (
{
†† 
absolutePath
°° 
=
°° 
Path
°° 
.
°° 
GetFullPath
°° #
(
°°# $
path
°°$ (
)
°°( )
;
°°) *
}
¢¢ 
var
¶¶ 
solution
¶¶ 
=
¶¶ '
GetOrGenerateSolutionFile
¶¶ +
(
¶¶+ ,
path
¶¶, 0
)
¶¶0 1
;
¶¶1 2
if
ßß 
(
ßß 
!
ßß 
string
ßß 
.
ßß  
IsNullOrWhiteSpace
ßß !
(
ßß! "
solution
ßß" *
)
ßß* +
)
ßß+ ,
{
®® 
solution
©© 
=
©© 
$"
©© 
\"
©© 
{
©© 
solution
©© 
}
©© 
\"
©© 
"
©©  
;
©©  !
solution
™™ 
=
™™ 
solution
™™ 
.
™™ 
Replace
™™ 
(
™™  
$str
™™  #
,
™™# $
$str
™™% )
)
™™) *
;
™™* +
}
´´ 
var
≠≠ 
process
≠≠ 
=
≠≠ 
new
≠≠ 
Process
≠≠ 
{
ÆÆ 
	StartInfo
ØØ 
=
ØØ 
new
ØØ 
ProcessStartInfo
ØØ $
{
∞∞ 
FileName
±± 
=
±± 
progpath
±± 
,
±± 
	Arguments
≤≤ 
=
≤≤ 
$"
≤≤ 
\"
≤≤ 
{
≤≤ 

CodeEditor
≤≤  
.
≤≤  !'
CurrentEditorInstallation
≤≤! :
}
≤≤: ;
\" \"
≤≤; @
{
≤≤@ A
absolutePath
≤≤A M
}
≤≤M N
\" 
≤≤N Q
{
≤≤Q R
solution
≤≤R Z
}
≤≤Z [
{
≤≤\ ]
line
≤≤] a
}
≤≤a b
"
≤≤b c
,
≤≤c d
CreateNoWindow
≥≥ 
=
≥≥ 
true
≥≥ 
,
≥≥ 
UseShellExecute
¥¥ 
=
¥¥ 
false
¥¥ 
,
¥¥ $
RedirectStandardOutput
µµ 
=
µµ 
true
µµ "
,
µµ" ##
RedirectStandardError
∂∂ 
=
∂∂ 
true
∂∂ !
,
∂∂! "
}
∑∑ 
}
∏∏ 
;
∏∏ 
var
ππ 
result
ππ 
=
ππ 
process
ππ 
.
ππ 
Start
ππ 
(
ππ 
)
ππ 
;
ππ  
while
ªª 
(
ªª	 

!
ªª
 
process
ªª 
.
ªª 
StandardOutput
ªª !
.
ªª! "
EndOfStream
ªª" -
)
ªª- .
{
ºº 
var
ΩΩ 

outputLine
ΩΩ 
=
ΩΩ 
process
ΩΩ 
.
ΩΩ 
StandardOutput
ΩΩ +
.
ΩΩ+ ,
ReadLine
ΩΩ, 4
(
ΩΩ4 5
)
ΩΩ5 6
;
ΩΩ6 7
if
ææ 
(
ææ 

outputLine
ææ 
==
ææ 
$str
ææ *
)
ææ* +
{
øø 
EditorUtility
¿¿ 
.
¿¿  
DisplayProgressBar
¿¿ %
(
¿¿% &
$str
¿¿& =
,
¿¿= >
$str
¿¿? v
,
¿¿v w
$num
¿¿x {
)
¿¿{ |
;
¿¿| }
}
¡¡ 
if
√√ 
(
√√ 

outputLine
√√ 
==
√√ 
$str
√√ (
)
√√( )
{
ƒƒ 
EditorUtility
≈≈ 
.
≈≈ 
ClearProgressBar
≈≈ #
(
≈≈# $
)
≈≈$ %
;
≈≈% &
}
∆∆ 
}
«« 
var
…… 
errorOutput
…… 
=
…… 
process
…… 
.
…… 
StandardError
…… *
.
……* +
	ReadToEnd
……+ 4
(
……4 5
)
……5 6
;
……6 7
if
   
(
   
!
   
string
   
.
   
IsNullOrEmpty
   
(
   
errorOutput
   (
)
  ( )
)
  ) *
{
ÀÀ 
Console
ÃÃ 
.
ÃÃ 
	WriteLine
ÃÃ 
(
ÃÃ 
$str
ÃÃ !
+
ÃÃ" #
errorOutput
ÃÃ$ /
)
ÃÃ/ 0
;
ÃÃ0 1
}
ÕÕ 
process
œœ 

.
œœ
 
WaitForExit
œœ 
(
œœ 
)
œœ 
;
œœ 
return
–– 	
result
––
 
;
–– 
}
—— 
[
”” 
	DllImport
”” 
(
”” 
$str
”” $
)
””$ %
]
””% &
static
‘‘ 
extern
‘‘	 
bool
‘‘ 
OpenVisualStudio
‘‘ %
(
‘‘% &
string
‘‘& ,
appPath
‘‘- 4
,
‘‘4 5
string
‘‘6 <
solutionPath
‘‘= I
,
‘‘I J
string
‘‘K Q
filePath
‘‘R Z
,
‘‘Z [
int
‘‘\ _
line
‘‘` d
)
‘‘d e
;
‘‘e f
bool
÷÷ 

OpenOSXApp
÷÷ 
(
÷÷ 
string
÷÷ 
path
÷÷ 
,
÷÷ 
int
÷÷ "
line
÷÷# '
,
÷÷' (
int
÷÷) ,
column
÷÷- 3
)
÷÷3 4
{
◊◊ 
string
ÿÿ 	
absolutePath
ÿÿ
 
=
ÿÿ 
$str
ÿÿ 
;
ÿÿ 
if
ŸŸ 
(
ŸŸ 
!
ŸŸ 
string
ŸŸ 
.
ŸŸ  
IsNullOrWhiteSpace
ŸŸ !
(
ŸŸ! "
path
ŸŸ" &
)
ŸŸ& '
)
ŸŸ' (
{
⁄⁄ 
absolutePath
€€ 
=
€€ 
Path
€€ 
.
€€ 
GetFullPath
€€ #
(
€€# $
path
€€$ (
)
€€( )
;
€€) *
}
‹‹ 
string
ﬁﬁ 	
solution
ﬁﬁ
 
=
ﬁﬁ '
GetOrGenerateSolutionFile
ﬁﬁ .
(
ﬁﬁ. /
path
ﬁﬁ/ 3
)
ﬁﬁ3 4
;
ﬁﬁ4 5
return
ﬂﬂ 	
OpenVisualStudio
ﬂﬂ
 
(
ﬂﬂ 

CodeEditor
ﬂﬂ %
.
ﬂﬂ% &'
CurrentEditorInstallation
ﬂﬂ& ?
,
ﬂﬂ? @
solution
ﬂﬂA I
,
ﬂﬂI J
absolutePath
ﬂﬂK W
,
ﬂﬂW X
line
ﬂﬂY ]
)
ﬂﬂ] ^
;
ﬂﬂ^ _
}
‡‡ 
private
‚‚ 	
string
‚‚
 '
GetOrGenerateSolutionFile
‚‚ *
(
‚‚* +
string
‚‚+ 1
path
‚‚2 6
)
‚‚6 7
{
„„ 
var
‰‰ 
solution
‰‰ 
=
‰‰ 
GetSolutionFile
‰‰ !
(
‰‰! "
path
‰‰" &
)
‰‰& '
;
‰‰' (
if
ÂÂ 
(
ÂÂ 
solution
ÂÂ 
==
ÂÂ 
$str
ÂÂ 
)
ÂÂ 
{
ÊÊ 

_generator
ÁÁ 
.
ÁÁ 
Sync
ÁÁ 
(
ÁÁ 
)
ÁÁ 
;
ÁÁ 
solution
ËË 
=
ËË 
GetSolutionFile
ËË 
(
ËË 
path
ËË #
)
ËË# $
;
ËË$ %
}
ÈÈ 
return
ÎÎ 	
solution
ÎÎ
 
;
ÎÎ 
}
ÏÏ 
string
ÓÓ 
GetSolutionFile
ÓÓ	 
(
ÓÓ 
string
ÓÓ 
path
ÓÓ  $
)
ÓÓ$ %
{
ÔÔ 
var
 
solutionFile
 
=
 

_generator
  
.
  !
SolutionFile
! -
(
- .
)
. /
;
/ 0
if
ÒÒ 
(
ÒÒ 
File
ÒÒ 
.
ÒÒ 
Exists
ÒÒ 
(
ÒÒ 
solutionFile
ÒÒ 
)
ÒÒ  
)
ÒÒ  !
{
ÚÚ 
return
ÛÛ 

solutionFile
ÛÛ 
;
ÛÛ 
}
ÙÙ 
return
ˆˆ 	
$str
ˆˆ
 
;
ˆˆ 
}
˜˜ 
}
¯¯ 
}˘˘ Ì3
åD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\FileUtility.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
internal 	
static
 
class 
FileUtility "
{ 
public 
const	 
char 
WinSeparator  
=! "
$char# '
;' (
public 
const	 
char 
UnixSeparator !
=" #
$char$ '
;' (
public 
static	 
string 
[ 
] $
FindPackageAssetFullPath 1
(1 2
string2 8
assetfilter9 D
,D E
stringF L

filefilterM W
)W X
{ 
return 	
AssetDatabase
 
. 

FindAssets "
(" #
assetfilter# .
). /
. 
Select 
( 
AssetDatabase 
. 
GUIDToAssetPath )
)) *
. 
Where 

(
 
	assetPath 
=> 
	assetPath !
.! "
Contains" *
(* +

filefilter+ 5
)5 6
)6 7
. 
Select 
( 
asset 
=> 
{ 
var 	
packageInfo
 
= 
UnityEditor #
.# $
PackageManager$ 2
.2 3
PackageInfo3 >
.> ?
FindForAssetPath? O
(O P
assetP U
)U V
;V W
return 
	Normalize 
( 
packageInfo "
." #
resolvedPath# /
+0 1
asset2 7
.7 8
	Substring8 A
(A B
packageInfoB M
.M N
	assetPathN W
.W X
LengthX ^
)^ _
)_ `
;` a
} 
) 
. 
ToArray 
( 
) 
; 
} 
public!! 
static!!	 
string!! 
GetAssetFullPath!! '
(!!' (
string!!( .
asset!!/ 4
)!!4 5
{"" 
var## 
basePath## 
=## 
Path## 
.## 
GetFullPath## "
(##" #
Path### '
.##' (
Combine##( /
(##/ 0
Application##0 ;
.##; <
dataPath##< D
,##D E
$str##F J
)##J K
)##K L
;##L M
return$$ 	
Path$$
 
.$$ 
GetFullPath$$ 
($$ 
Path$$ 
.$$  
Combine$$  '
($$' (
basePath$$( 0
,$$0 1
	Normalize$$2 ;
($$; <
asset$$< A
)$$A B
)$$B C
)$$C D
;$$D E
}%% 
public'' 
static''	 
string'' 
	Normalize''  
(''  !
string''! '
path''( ,
)'', -
{(( 
if)) 
()) 
string)) 
.)) 
IsNullOrEmpty)) 
()) 
path))  
)))  !
)))! "
return** 

path** 
;** 
if,, 
(,, 
Path,, 
.,, "
DirectorySeparatorChar,, "
==,,# %
WinSeparator,,& 2
),,2 3
path-- 
=--	 

path-- 
.-- 
Replace-- 
(-- 
UnixSeparator-- %
,--% &
WinSeparator--' 3
)--3 4
;--4 5
if.. 
(.. 
Path.. 
... "
DirectorySeparatorChar.. "
==..# %
UnixSeparator..& 3
)..3 4
path// 
=//	 

path// 
.// 
Replace// 
(// 
WinSeparator// $
,//$ %
UnixSeparator//& 3
)//3 4
;//4 5
return11 	
path11
 
.11 
Replace11 
(11 
string11 
.11 
Concat11 $
(11$ %
WinSeparator11% 1
,111 2
WinSeparator113 ?
)11? @
,11@ A
WinSeparator11B N
.11N O
ToString11O W
(11W X
)11X Y
)11Y Z
;11Z [
}22 
public44 
static44	 
string44 "
NormalizeWindowsToUnix44 -
(44- .
string44. 4
path445 9
)449 :
{55 
if66 
(66 
string66 
.66 
IsNullOrEmpty66 
(66 
path66  
)66  !
)66! "
return77 

path77 
;77 
return99 	
path99
 
.99 
Replace99 
(99 
WinSeparator99 #
,99# $
UnixSeparator99% 2
)992 3
;993 4
}:: 
internal<< 

static<< 
bool<< $
IsFileInProjectDirectory<< /
(<</ 0
string<<0 6
fileName<<7 ?
)<<? @
{== 
var>> 
basePath>> 
=>> 
Path>> 
.>> 
GetFullPath>> "
(>>" #
Path>># '
.>>' (
Combine>>( /
(>>/ 0
Application>>0 ;
.>>; <
dataPath>>< D
,>>D E
$str>>F J
)>>J K
)>>K L
;>>L M
fileName?? 
=?? 
	Normalize?? 
(?? 
fileName??  
)??  !
;??! "
ifAA 
(AA 
!AA 
PathAA 
.AA 
IsPathRootedAA 
(AA 
fileNameAA "
)AA" #
)AA# $
fileNameBB 
=BB 
PathBB 
.BB 
CombineBB 
(BB 
basePathBB $
,BB$ %
fileNameBB& .
)BB. /
;BB/ 0
returnDD 	
stringDD
 
.DD 
EqualsDD 
(DD 
PathDD 
.DD 
GetDirectoryNameDD -
(DD- .
fileNameDD. 6
)DD6 7
,DD7 8
basePathDD9 A
,DDA B
StringComparisonDDC S
.DDS T
OrdinalIgnoreCaseDDT e
)DDe f
;DDf g
}EE 
}FF 
}GG òÑ
ßD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\ProjectGeneration\AssemblyNameProvider.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
public 
	interface !
IAssemblyNameProvider '
{ 
string 
[ 	
]	 
&
ProjectSupportedExtensions %
{& '
get( +
;+ ,
}- .
string *
ProjectGenerationRootNamespace	 '
{( )
get* -
;- .
}/ 0!
ProjectGenerationFlag !
ProjectGenerationFlag -
{. /
get0 3
;3 4
}5 6
string )
GetAssemblyNameFromScriptPath	 &
(& '
string' -
path. 2
)2 3
;3 4
string 
GetAssemblyName	 
( 
string 
assemblyOutputPath  2
,2 3
string4 :
assemblyName; G
)G H
;H I
bool %
IsInternalizedPackagePath  
(  !
string! '
path( ,
), -
;- .
IEnumerable 
< 
Assembly 
> 
GetAssemblies %
(% &
Func& *
<* +
string+ 1
,1 2
bool3 7
>7 8&
shouldFileBePartOfSolution9 S
)S T
;T U
IEnumerable 
< 
string 
> 
GetAllAssetPaths &
(& '
)' (
;( )
UnityEditor 
. 
PackageManager 
. 
PackageInfo (
FindForAssetPath) 9
(9 :
string: @
	assetPathA J
)J K
;K L
ResponseFileData 
ParseResponseFile $
($ %
string% +
responseFilePath, <
,< =
string> D
projectDirectoryE U
,U V
stringW ]
[] ^
]^ _&
systemReferenceDirectories` z
)z {
;{ |
void #
ToggleProjectGeneration 
( !
ProjectGenerationFlag 4

preference5 ?
)? @
;@ A
} 
public 
class  
AssemblyNameProvider "
:# $!
IAssemblyNameProvider% :
{   !
ProjectGenerationFlag!! #
m_ProjectGenerationFlag!! /
=!!0 1
(!!2 3!
ProjectGenerationFlag!!3 H
)!!H I
EditorPrefs!!I T
.!!T U
GetInt!!U [
(!![ \
$str"" "
,""" #
(## 
int## 
)## 
(## 	!
ProjectGenerationFlag##	 
.## 
Local## $
|##% &!
ProjectGenerationFlag##' <
.##< =
Embedded##= E
)##E F
)##F G
;##G H
public%% 
string%%	 
[%% 
]%% &
ProjectSupportedExtensions%% ,
=>%%- /
EditorSettings%%0 >
.%%> ?+
projectGenerationUserExtensions%%? ^
;%%^ _
public'' 
string''	 *
ProjectGenerationRootNamespace'' .
=>''/ 1
EditorSettings''2 @
.''@ A*
projectGenerationRootNamespace''A _
;''_ `
public)) !
ProjectGenerationFlag))	 !
ProjectGenerationFlag)) 4
{** 
get++ 
=>++ 	#
m_ProjectGenerationFlag++
 !
;++! "
private,, 

set,, 
{-- 
EditorPrefs.. 
... 
SetInt.. 
(.. 
$str.. 6
,..6 7
(..8 9
int..9 <
)..< =
value..= B
)..B C
;..C D#
m_ProjectGenerationFlag// 
=// 
value// #
;//# $
}00 
}11 
public33 
string33	 )
GetAssemblyNameFromScriptPath33 -
(33- .
string33. 4
path335 9
)339 :
{44 
return55 	
CompilationPipeline55
 
.55 )
GetAssemblyNameFromScriptPath55 ;
(55; <
path55< @
)55@ A
;55A B
}66 
public88 
IEnumerable88	 
<88 
Assembly88 
>88 
GetAssemblies88 ,
(88, -
Func88- 1
<881 2
string882 8
,888 9
bool88: >
>88> ?&
shouldFileBePartOfSolution88@ Z
)88Z [
{99 
foreach:: 

(:: 
var:: 
assembly:: 
in:: 
CompilationPipeline:: /
.::/ 0
GetAssemblies::0 =
(::= >
)::> ?
)::? @
{;; 
if<< 
(<< 
assembly<< 
.<< 
sourceFiles<< 
.<< 
Any<<  
(<<  !&
shouldFileBePartOfSolution<<! ;
)<<; <
)<<< =
{== 
var>> 
options>>	 
=>> 
new>> !
ScriptCompilerOptions>> ,
{?? 
ResponseFiles@@ 
=@@ 
assembly@@ 
.@@ 
compilerOptions@@ .
.@@. /
ResponseFiles@@/ <
,@@< =
AllowUnsafeCodeAA 
=AA 
assemblyAA  
.AA  !
compilerOptionsAA! 0
.AA0 1
AllowUnsafeCodeAA1 @
,AA@ A!
ApiCompatibilityLevelBB 
=BB 
assemblyBB &
.BB& '
compilerOptionsBB' 6
.BB6 7!
ApiCompatibilityLevelBB7 L
}CC 
;CC 
yieldEE 

returnEE 
newEE 
AssemblyEE 
(EE 
assemblyEE '
.EE' (
nameEE( ,
,EE, -
$strEE. @
,EE@ A
assemblyFF 
.FF 
sourceFilesFF 
,FF 
newFF 
[FF  
]FF  !
{FF" #
$strFF$ +
,FF+ ,
$strFF- 4
}FF5 6
.FF6 7
ConcatFF7 =
(FF= >
assemblyFF> F
.FFF G
definesFFG N
)FFN O
.FFO P
ConcatFFP V
(FFV W#
EditorUserBuildSettingsFFW n
.FFn o+
activeScriptCompilationDefines	FFo ç
)
FFç é
.
FFé è
ToArray
FFè ñ
(
FFñ ó
)
FFó ò
,
FFò ô
assemblyGG 
.GG 
assemblyReferencesGG !
,GG! "
assemblyHH 
.HH &
compiledAssemblyReferencesHH )
,HH) *
assemblyII 
.II 
flagsII 
,II 
optionsKK 
,KK  
assemblyLL  
.LL  !
rootNamespaceLL! .
)LL. /
;LL/ 0
}PP 
}QQ 
ifSS 
(SS !
ProjectGenerationFlagSS 
.SS 
HasFlagSS $
(SS$ %!
ProjectGenerationFlagSS% :
.SS: ;
PlayerAssembliesSS; K
)SSK L
)SSL M
{TT 
foreachUU 
(UU 
varUU 
assemblyUU 
inUU 
CompilationPipelineUU 0
.UU0 1
GetAssembliesUU1 >
(UU> ?
AssembliesTypeUU? M
.UUM N
PlayerUUN T
)UUT U
.UUU V
WhereUUV [
(UU[ \
assemblyUU\ d
=>UUe g
assemblyUUh p
.UUp q
sourceFilesUUq |
.UU| }
Any	UU} Ä
(
UUÄ Å(
shouldFileBePartOfSolution
UUÅ õ
)
UUõ ú
)
UUú ù
)
UUù û
{VV 
varWW 
optionsWW	 
=WW 
newWW !
ScriptCompilerOptionsWW ,
{XX 
ResponseFilesYY 
=YY 
assemblyYY 
.YY 
compilerOptionsYY .
.YY. /
ResponseFilesYY/ <
,YY< =
AllowUnsafeCodeZZ 
=ZZ 
assemblyZZ  
.ZZ  !
compilerOptionsZZ! 0
.ZZ0 1
AllowUnsafeCodeZZ1 @
,ZZ@ A!
ApiCompatibilityLevel[[ 
=[[ 
assembly[[ &
.[[& '
compilerOptions[[' 6
.[[6 7!
ApiCompatibilityLevel[[7 L
}\\ 
;\\ 
yield^^ 

return^^ 
new__ 	
Assembly__
 
(__ 
assembly__ 
.__ 
name__  
,__  !
$str__" ;
,__; <
assembly`` 
.`` 
sourceFiles`` 
,`` 
newaa 

[aa
 
]aa 
{aa 
$straa 
,aa 
$straa 
}aa  !
.aa! "
Concataa" (
(aa( )
assemblyaa) 1
.aa1 2
definesaa2 9
)aa9 :
.aa: ;
ToArrayaa; B
(aaB C
)aaC D
,aaD E
assemblybb 
.bb 
assemblyReferencesbb "
,bb" #
assemblycc 
.cc &
compiledAssemblyReferencescc *
,cc* +
assemblydd 
.dd 
flagsdd 
,dd 
optionsff #
,ff# $
assemblygg $
.gg$ %
rootNamespacegg% 2
)gg2 3
;gg3 4
}kk 
}ll 
}mm 
publicoo 
stringoo	  
GetCompileOutputPathoo $
(oo$ %
stringoo% +
assemblyNameoo, 8
)oo8 9
{pp 
returnqq 	
assemblyNameqq
 
.qq 
EndsWithqq 
(qq  
$strqq  )
,qq) *
StringComparisonqq+ ;
.qq; <
Ordinalqq< C
)qqC D
?qqE F
$strqqG `
:qqa b
$strqqc u
;qqu v
}rr 
publictt 
IEnumerablett	 
<tt 
stringtt 
>tt 
GetAllAssetPathstt -
(tt- .
)tt. /
{uu 
returnvv 	
AssetDatabasevv
 
.vv 
GetAllAssetPathsvv (
(vv( )
)vv) *
;vv* +
}ww 
publicyy 
UnityEditoryy	 
.yy 
PackageManageryy #
.yy# $
PackageInfoyy$ /
FindForAssetPathyy0 @
(yy@ A
stringyyA G
	assetPathyyH Q
)yyQ R
{zz 
return{{ 	
UnityEditor{{
 
.{{ 
PackageManager{{ $
.{{$ %
PackageInfo{{% 0
.{{0 1
FindForAssetPath{{1 A
({{A B
	assetPath{{B K
){{K L
;{{L M
}|| 
public~~ 
bool~~	 %
IsInternalizedPackagePath~~ '
(~~' (
string~~( .
path~~/ 3
)~~3 4
{ 
if
ÄÄ 
(
ÄÄ 
string
ÄÄ 
.
ÄÄ 
IsNullOrEmpty
ÄÄ 
(
ÄÄ 
path
ÄÄ  
.
ÄÄ  !
Trim
ÄÄ! %
(
ÄÄ% &
)
ÄÄ& '
)
ÄÄ' (
)
ÄÄ( )
{
ÅÅ 
return
ÇÇ 

false
ÇÇ 
;
ÇÇ 
}
ÉÉ 
var
ÑÑ 
packageInfo
ÑÑ 
=
ÑÑ 
FindForAssetPath
ÑÑ %
(
ÑÑ% &
path
ÑÑ& *
)
ÑÑ* +
;
ÑÑ+ ,
if
ÖÖ 
(
ÖÖ 
packageInfo
ÖÖ 
==
ÖÖ 
null
ÖÖ 
)
ÖÖ 
{
ÜÜ 
return
áá 

false
áá 
;
áá 
}
àà 
var
ââ 
packageSource
ââ 
=
ââ 
packageInfo
ââ "
.
ââ" #
source
ââ# )
;
ââ) *
switch
ää 	
(
ää
 
packageSource
ää 
)
ää 
{
ãã 
case
åå 
PackageSource
åå	 
.
åå 
Embedded
åå 
:
åå  
return
çç 
!
çç #
ProjectGenerationFlag
çç "
.
çç" #
HasFlag
çç# *
(
çç* +#
ProjectGenerationFlag
çç+ @
.
çç@ A
Embedded
ççA I
)
ççI J
;
ççJ K
case
éé 
PackageSource
éé	 
.
éé 
Registry
éé 
:
éé  
return
èè 
!
èè #
ProjectGenerationFlag
èè "
.
èè" #
HasFlag
èè# *
(
èè* +#
ProjectGenerationFlag
èè+ @
.
èè@ A
Registry
èèA I
)
èèI J
;
èèJ K
case
êê 
PackageSource
êê	 
.
êê 
BuiltIn
êê 
:
êê 
return
ëë 
!
ëë #
ProjectGenerationFlag
ëë "
.
ëë" #
HasFlag
ëë# *
(
ëë* +#
ProjectGenerationFlag
ëë+ @
.
ëë@ A
BuiltIn
ëëA H
)
ëëH I
;
ëëI J
case
íí 
PackageSource
íí	 
.
íí 
Unknown
íí 
:
íí 
return
ìì 
!
ìì #
ProjectGenerationFlag
ìì "
.
ìì" #
HasFlag
ìì# *
(
ìì* +#
ProjectGenerationFlag
ìì+ @
.
ìì@ A
Unknown
ììA H
)
ììH I
;
ììI J
case
îî 
PackageSource
îî	 
.
îî 
Local
îî 
:
îî 
return
ïï 
!
ïï #
ProjectGenerationFlag
ïï "
.
ïï" #
HasFlag
ïï# *
(
ïï* +#
ProjectGenerationFlag
ïï+ @
.
ïï@ A
Local
ïïA F
)
ïïF G
;
ïïG H
case
ññ 
PackageSource
ññ	 
.
ññ 
Git
ññ 
:
ññ 
return
óó 
!
óó #
ProjectGenerationFlag
óó "
.
óó" #
HasFlag
óó# *
(
óó* +#
ProjectGenerationFlag
óó+ @
.
óó@ A
Git
óóA D
)
óóD E
;
óóE F
case
òò 
PackageSource
òò	 
.
òò 
LocalTarball
òò #
:
òò# $
return
ôô 
!
ôô #
ProjectGenerationFlag
ôô "
.
ôô" #
HasFlag
ôô# *
(
ôô* +#
ProjectGenerationFlag
ôô+ @
.
ôô@ A
LocalTarBall
ôôA M
)
ôôM N
;
ôôN O
}
öö 
return
úú 	
false
úú
 
;
úú 
}
ùù 
public
üü 
ResponseFileData
üü	 
ParseResponseFile
üü +
(
üü+ ,
string
üü, 2
responseFilePath
üü3 C
,
üüC D
string
üüE K
projectDirectory
üüL \
,
üü\ ]
string
üü^ d
[
üüd e
]
üüe f)
systemReferenceDirectoriesüüg Å
)üüÅ Ç
{
†† 
return
°° 	!
CompilationPipeline
°°
 
.
°° 
ParseResponseFile
°° /
(
°°/ 0
responseFilePath
¢¢ 
,
¢¢ 
projectDirectory
££ 
,
££ (
systemReferenceDirectories
§§ 
)
•• 
;
•• 
}
¶¶ 
public
®® 
void
®®	 %
ToggleProjectGeneration
®® %
(
®®% &#
ProjectGenerationFlag
®®& ;

preference
®®< F
)
®®F G
{
©© 
if
™™ 
(
™™ #
ProjectGenerationFlag
™™ 
.
™™ 
HasFlag
™™ $
(
™™$ %

preference
™™% /
)
™™/ 0
)
™™0 1
{
´´ #
ProjectGenerationFlag
¨¨ 
^=
¨¨ 

preference
¨¨ '
;
¨¨' (
}
≠≠ 
else
ÆÆ 
{
ØØ #
ProjectGenerationFlag
∞∞ 
|=
∞∞ 

preference
∞∞ '
;
∞∞' (
}
±± 
}
≤≤ 
public
¥¥ 
void
¥¥	 (
ResetProjectGenerationFlag
¥¥ (
(
¥¥( )
)
¥¥) *
{
µµ #
ProjectGenerationFlag
∂∂ 
=
∂∂ #
ProjectGenerationFlag
∂∂ 0
.
∂∂0 1
None
∂∂1 5
;
∂∂5 6
}
∑∑ 
public
ππ 
string
ππ	 
GetAssemblyName
ππ 
(
ππ  
string
ππ  & 
assemblyOutputPath
ππ' 9
,
ππ9 :
string
ππ; A
assemblyName
ππB N
)
ππN O
{
∫∫ 
return
ªª 	 
assemblyOutputPath
ªª
 
.
ªª 
EndsWith
ªª %
(
ªª% &
$str
ªª& 1
,
ªª1 2
StringComparison
ªª3 C
.
ªªC D
Ordinal
ªªD K
)
ªªK L
?
ªªM N
assemblyName
ªªO [
+
ªª\ ]
$str
ªª^ g
:
ªªh i
assemblyName
ªªj v
;
ªªv w
}
ºº 
}
ΩΩ 
}ææ ≈
ñD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\MessageType.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
.- .
	Messaging. 7
{ 
internal 	
enum
 
MessageType 
{ 
None		 
=		 
$num			 

,		
 
Ping 
, 
Pong 
, 
Play 
, 
Stop 
, 
Pause 
, 
Unpause 	
,	 

Build 
, 
Refresh 	
,	 

Info 
, 
Error 
, 
Warning 	
,	 

Open 
, 
Opened 
, 	
Version 	
,	 

UpdatePackage 
, 
ProjectPath   
,   
}!! 
}"" ¿<
ÜD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Image.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{		 
public

 
sealed

 
class

 
Image

 
:

 
IDisposable

 (
{ 
long 
position 
; 
Stream 
stream	 
; 
Image 
( 
Stream 
stream 
) 
{ 
this 
. 
stream 
= 
stream 
; 
this 
. 
position 
= 
stream 
. 
Position "
;" #
this 
. 
stream 
. 
Position 
= 
$num 
; 
} 
bool 
Advance 
( 
int 
length 
) 
{ 
if 
( 
stream 
. 
Position 
+ 
length 
>=  "
stream# )
.) *
Length* 0
)0 1
return 

false 
; 
stream 	
.	 

Seek
 
( 
length 
, 

SeekOrigin !
.! "
Current" )
)) *
;* +
return 	
true
 
; 
} 
bool   
MoveTo   
(   
uint   
position   
)   
{!! 
if"" 
("" 
position"" 
>="" 
stream"" 
."" 
Length""  
)""  !
return## 

false## 
;## 
stream%% 	
.%%	 

Position%%
 
=%% 
position%% 
;%% 
return&& 	
true&&
 
;&& 
}'' 
void)) 
IDisposable)) 
.)) 
Dispose)) 
()) 
))) 
{** 
stream++ 	
.++	 

Position++
 
=++ 
position++ 
;++ 
},, 
ushort.. 

ReadUInt16..	 
(.. 
).. 
{// 
return00 	
(00
 
ushort00 
)00 
(00 
stream00 
.00 
ReadByte00 "
(00" #
)00# $
|11 
(11 
stream11 
.11 
ReadByte11 
(11 
)11 
<<11 
$num11 
)11 
)11 
;11  
}22 
uint44 

ReadUInt3244 
(44 
)44 
{55 
return66 	
(66
 
uint66 
)66 
(66 
stream66 
.66 
ReadByte66  
(66  !
)66! "
|77 
(77 
stream77 
.77 
ReadByte77 
(77 
)77 
<<77 
$num77 
)77 
|88 
(88 
stream88 
.88 
ReadByte88 
(88 
)88 
<<88 
$num88 
)88 
|99 
(99 
stream99 
.99 
ReadByte99 
(99 
)99 
<<99 
$num99 
)99 
)99  
;99  !
}:: 
bool<< 
IsManagedAssembly<< 
(<< 
)<< 
{== 
if>> 
(>> 
stream>> 
.>> 
Length>> 
<>> 
$num>> 
)>> 
return?? 

false?? 
;?? 
if@@ 
(@@ 

ReadUInt16@@ 
(@@ 
)@@ 
!=@@ 
$num@@ 
)@@ 
returnAA 

falseAA 
;AA 
ifBB 
(BB 
!BB 
AdvanceBB 
(BB 
$numBB 
)BB 
)BB 
returnCC 

falseCC 
;CC 
ifDD 
(DD 
!DD 
MoveToDD 
(DD 

ReadUInt32DD 
(DD 
)DD 
)DD 
)DD 
returnEE 

falseEE 
;EE 
ifFF 
(FF 

ReadUInt32FF 
(FF 
)FF 
!=FF 
$numFF !
)FF! "
returnGG 

falseGG 
;GG 
ifHH 
(HH 
!HH 
AdvanceHH 
(HH 
$numHH 
)HH 
)HH 
returnII 

falseII 
;II 
ifJJ 
(JJ 
!JJ 
AdvanceJJ 
(JJ 

ReadUInt16JJ 
(JJ 
)JJ 
==JJ 
$numJJ  %
?JJ& '
$numJJ( +
:JJ, -
$numJJ. 1
)JJ1 2
)JJ2 3
returnKK 

falseKK 
;KK 
returnMM 	

ReadUInt32MM
 
(MM 
)MM 
!=MM 
$numMM 
;MM 
}NN 
publicPP 
staticPP	 
boolPP 

IsAssemblyPP 
(PP  
stringPP  &
filePP' +
)PP+ ,
{QQ 
ifRR 
(RR 
fileRR 
==RR 
nullRR 
)RR 
throwSS 	
newSS
 !
ArgumentNullExceptionSS #
(SS# $
$strSS$ *
)SS* +
;SS+ ,
usingUU 
(UU	 

varUU
 
streamUU 
=UU 
newUU 

FileStreamUU %
(UU% &
fileUU& *
,UU* +
FileModeUU, 4
.UU4 5
OpenUU5 9
,UU9 :

FileAccessUU; E
.UUE F
ReadUUF J
,UUJ K
	FileShareUUL U
.UUU V
ReadUUV Z
)UUZ [
)UU[ \
returnVV 


IsAssemblyVV 
(VV 
streamVV 
)VV 
;VV 
}WW 
publicYY 
staticYY	 
boolYY 

IsAssemblyYY 
(YY  
StreamYY  &
streamYY' -
)YY- .
{ZZ 
if[[ 
([[ 
stream[[ 
==[[ 
null[[ 
)[[ 
throw\\ 	
new\\
 !
ArgumentNullException\\ #
(\\# $
nameof\\$ *
(\\* +
stream\\+ 1
)\\1 2
)\\2 3
;\\3 4
if]] 
(]] 
!]] 
stream]] 
.]] 
CanRead]] 
)]] 
throw^^ 	
new^^
 
ArgumentException^^ 
(^^  
nameof^^  &
(^^& '
stream^^' -
)^^- .
)^^. /
;^^/ 0
if__ 
(__ 
!__ 
stream__ 
.__ 
CanSeek__ 
)__ 
throw`` 	
new``
 
ArgumentException`` 
(``  
nameof``  &
(``& '
stream``' -
)``- .
)``. /
;``/ 0
usingbb 
(bb	 

varbb
 
imagebb 
=bb 
newbb 
Imagebb 
(bb  
streambb  &
)bb& '
)bb' (
returncc 

imagecc 
.cc 
IsManagedAssemblycc "
(cc" #
)cc# $
;cc$ %
}dd 
}ee 
}ff ≠
âD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Solution.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
internal 	
class
 
Solution 
{ 
public		  
SolutionProjectEntry			 
[		 
]		 
Projects		  (
{		) *
get		+ .
;		. /
set		0 3
;		3 4
}		5 6
public

 
SolutionProperties

	 
[

 
]

 

Properties

 (
{

) *
get

+ .
;

. /
set

0 3
;

3 4
}

5 6
} 
} —
üD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\ProjectGeneration\GUIDProvider.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
public 
	interface 
IGUIDGenerator  
{		 
string

 
ProjectGuid

	 
(

 
string

 
projectName

 '
,

' (
string

) /
assemblyName

0 <
)

< =
;

= >
string 
SolutionGuid	 
( 
string 
projectName (
,( )
ScriptingLanguage* ;
scriptingLanguage< M
)M N
;N O
} 
class 
GUIDProvider 
: 
IGUIDGenerator $
{ 
public 
string	 
ProjectGuid 
( 
string "
projectName# .
,. /
string0 6
assemblyName7 C
)C D
{ 
return 	!
SolutionGuidGenerator
 
.  
GuidForProject  .
(. /
projectName/ :
+; <
assemblyName= I
)I J
;J K
} 
public 
string	 
SolutionGuid 
( 
string #
projectName$ /
,/ 0
ScriptingLanguage1 B
scriptingLanguageC T
)T U
{ 
return 	!
SolutionGuidGenerator
 
.  
GuidForSolution  /
(/ 0
projectName0 ;
,; <
scriptingLanguage= N
)N O
;O P
} 
} 
} —

íD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Messaging\Message.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
.- .
	Messaging. 7
{		 
internal

 	
class


 
Message

 
{ 
public 
MessageType	 
Type 
{ 
get 
;  
set! $
;$ %
}& '
public 
string	 
Value 
{ 
get 
; 
set  
;  !
}" #
public 

IPEndPoint	 
Origin 
{ 
get  
;  !
set" %
;% &
}' (
public 
override	 
string 
ToString !
(! "
)" #
{ 
return 	
string
 
. 
Format 
( 
CultureInfo #
.# $
InvariantCulture$ 4
,4 5
$str6 T
,T U
TypeV Z
,Z [
Value\ a
)a b
;b c
} 
} 
} †d
äD:\Dakota\OneDriveOU\School\CS3560\repos\3560-Project-Spring2021\Library\PackageCache\com.unity.ide.visualstudio@2.0.5\Editor\Discovery.cs
	namespace 	
	Microsoft
 
. 
Unity 
. 
VisualStudio &
.& '
Editor' -
{ 
internal 	
static
 
class 
	Discovery  
{ 
internal 

const 
string 
ManagedWorkload '
=( )
$str* W
;W X
public 
static	 
IEnumerable 
< %
IVisualStudioInstallation 5
>5 6(
GetVisualStudioInstallations7 S
(S T
)T U
{ 
if 
( 
VisualStudioEditor 
. 
	IsWindows #
)# $
{ 
foreach 
( 
var 
installation 
in  
QueryVsWhere! -
(- .
). /
)/ 0
yield 

return 
installation 
; 
} 
if 
( 
VisualStudioEditor 
. 
IsOSX 
)  
{ 
var 

candidates 
= 
	Directory 
.  
EnumerateDirectories 3
(3 4
$str4 C
,C D
$strE L
)L M
;M N
foreach   
(   
var   
	candidate   
in   

candidates   (
)  ( )
{!! 
if"" 
("" 	#
TryDiscoverInstallation""	  
(""  !
	candidate""! *
,""* +
out"", /
var""0 3
installation""4 @
)""@ A
)""A B
yield## 
return## 
installation## 
;##  
}$$ 
}%% 
}&& 
private(( 	
static((
 
bool(( "
IsCandidateToDiscovery(( ,
(((, -
string((- 3
path((4 8
)((8 9
{)) 
if** 
(** 
File** 
.** 
Exists** 
(** 
path** 
)** 
&&** 
VisualStudioEditor** .
.**. /
	IsWindows**/ 8
&&**9 ;
Regex**< A
.**A B
IsMatch**B I
(**I J
path**J N
,**N O
$str**P ]
,**] ^
RegexOptions**_ k
.**k l

IgnoreCase**l v
)**v w
)**w x
return++ 

true++ 
;++ 
if-- 
(-- 
	Directory-- 
.-- 
Exists-- 
(-- 
path-- 
)-- 
&&--  
VisualStudioEditor--! 3
.--3 4
IsOSX--4 9
&&--: <
Regex--= B
.--B C
IsMatch--C J
(--J K
path--K O
,--O P
$str--Q v
,--v w
RegexOptions	--x Ñ
.
--Ñ Ö

IgnoreCase
--Ö è
)
--è ê
)
--ê ë
return.. 

true.. 
;.. 
return00 	
false00
 
;00 
}11 
public33 
static33	 
bool33 #
TryDiscoverInstallation33 ,
(33, -
string33- 3

editorPath334 >
,33> ?
out33@ C%
IVisualStudioInstallation33D ]
installation33^ j
)33j k
{44 
installation55 
=55 
null55 
;55 
if77 
(77 
string77 
.77 
IsNullOrEmpty77 
(77 

editorPath77 &
)77& '
)77' (
return88 

false88 
;88 
if:: 
(:: 
!:: "
IsCandidateToDiscovery:: 
(:: 

editorPath:: )
)::) *
)::* +
return;; 

false;; 
;;; 
var>> 
fvi>> 

=>> 

editorPath>> 
;>> 
ifAA 
(AA 
VisualStudioEditorAA 
.AA 
IsOSXAA 
)AA  
fviBB 
=BB 	
PathBB
 
.BB 
CombineBB 
(BB 

editorPathBB !
,BB! "
$strBB# -
,BB- .
$strBB/ :
,BB: ;
$strBB< A
,BBA B
$strBBC P
,BBP Q
$strBBR W
,BBW X
$strBBY k
)BBk l
;BBl m
ifDD 
(DD 
!DD 
FileDD 
.DD 
ExistsDD 
(DD 
fviDD 
)DD 
)DD 
returnEE 

falseEE 
;EE 
varII 
viII 	
=II
 
FileVersionInfoII 
.II 
GetVersionInfoII *
(II* +
fviII+ .
)II. /
;II/ 0
varJJ 
versionJJ 
=JJ 
newJJ 
VersionJJ 
(JJ 
viJJ 
.JJ  
ProductVersionJJ  .
)JJ. /
;JJ/ 0
varKK 
isPrereleaseKK 
=KK 
viKK 
.KK 
IsPreReleaseKK %
||KK& (
stringKK) /
.KK/ 0
ConcatKK0 6
(KK6 7

editorPathKK7 A
,KKA B
$strKKC F
+KKG H
viKKI K
.KKK L
FileDescriptionKKL [
)KK[ \
.KK\ ]
ToLowerKK] d
(KKd e
)KKe f
.KKf g
ContainsKKg o
(KKo p
$strKKp y
)KKy z
;KKz {
installationMM 
=MM 
newMM $
VisualStudioInstallationMM .
(MM. /
)MM/ 0
{NN 
IsPrereleaseOO 
=OO 
isPrereleaseOO 
,OO  
NamePP 
=PP	 

$"PP 
{PP 
viPP 
.PP 
FileDescriptionPP  
}PP  !
{PP! "
(PP" #
isPrereleasePP# /
&&PP0 2
VisualStudioEditorPP3 E
.PPE F
IsOSXPPF K
?PPL M
$strPPN X
:PPY Z
stringPP[ a
.PPa b
EmptyPPb g
)PPg h
}PPh i
 [PPi k
{PPk l
versionPPl s
.PPs t
ToStringPPt |
(PP| }
$numPP} ~
)PP~ 
}	PP Ä
]
PPÄ Å
"
PPÅ Ç
,
PPÇ É
PathQQ 
=QQ	 


editorPathQQ 
,QQ 
VersionRR 
=RR 
versionRR 
}SS 
;SS 
returnTT 	
trueTT
 
;TT 
}UU 
[YY 
SerializableYY 
]YY 
internalZZ 

classZZ 
VsWhereResultZZ 
{[[ 
public\\ 	
VsWhereEntry\\
 
[\\ 
]\\ 
entries\\  
;\\  !
public^^ 	
static^^
 
VsWhereResult^^ 
FromJson^^ '
(^^' (
string^^( .
json^^/ 3
)^^3 4
{__ 
return`` 

JsonUtility`` 
.`` 
FromJson`` 
<``  
VsWhereResult``  -
>``- .
(``. /
$str``/ 5
+``6 7
nameof``8 >
(``> ?
VsWhereResult``? L
.``L M
entries``M T
)``T U
+``V W
$str``X ^
+``_ `
json``a e
+``f g
$str``h l
)``l m
;``m n
}aa 
publiccc 	
IEnumerablecc
 
<cc $
VisualStudioInstallationcc .
>cc. /'
ToVisualStudioInstallationscc0 K
(ccK L
)ccL M
{dd 
foreachee 
(ee 
varee 
entryee 
inee 
entriesee !
)ee! "
{ff 
yieldgg 

returngg 
newgg $
VisualStudioInstallationgg .
(gg. /
)gg/ 0
{hh 
Nameii 

=ii 
$"ii 
{ii 
entryii 
.ii 
displayNameii !
}ii! "
 [ii" $
{ii$ %
entryii% *
.ii* +
catalogii+ 2
.ii2 3!
productDisplayVersionii3 H
}iiH I
]iiI J
"iiJ K
,iiK L
Pathjj 

=jj 
entryjj 
.jj 
productPathjj 
,jj 
IsPrereleasekk 
=kk 
entrykk 
.kk 
isPrereleasekk '
,kk' (
Versionll 
=ll 
Versionll 
.ll 
Parsell 
(ll 
entryll #
.ll# $
catalogll$ +
.ll+ ,
buildVersionll, 8
)ll8 9
}mm 
;mm 
}nn 
}oo 
}pp 
[rr 
Serializablerr 
]rr 
internalss 

classss 
VsWhereEntryss 
{tt 
publicuu 	
stringuu
 
displayNameuu 
;uu 
publicvv 	
boolvv
 
isPrereleasevv 
;vv 
publicww 	
stringww
 
productPathww 
;ww 
publicxx 	
VsWhereCatalogxx
 
catalogxx  
;xx  !
}yy 
[{{ 
Serializable{{ 
]{{ 
internal|| 

class|| 
VsWhereCatalog|| 
{}} 
public~~ 	
string~~
 !
productDisplayVersion~~ &
;~~& '
public 	
string
 
buildVersion 
; 
}
ÄÄ 
private
ÑÑ 	
static
ÑÑ
 
IEnumerable
ÑÑ 
<
ÑÑ &
VisualStudioInstallation
ÑÑ 5
>
ÑÑ5 6
QueryVsWhere
ÑÑ7 C
(
ÑÑC D
)
ÑÑD E
{
ÖÖ 
var
ÜÜ 
progpath
ÜÜ 
=
ÜÜ 
FileUtility
ÜÜ 
.
áá &
FindPackageAssetFullPath
áá 
(
áá 
$str
áá 2
,
áá2 3
$str
áá4 A
)
ááA B
.
àà 
FirstOrDefault
àà 
(
àà 
)
àà 
;
àà 
if
ää 
(
ää 
string
ää 
.
ää  
IsNullOrWhiteSpace
ää  
(
ää  !
progpath
ää! )
)
ää) *
)
ää* +
return
ãã 


Enumerable
ãã 
.
ãã 
Empty
ãã 
<
ãã &
VisualStudioInstallation
ãã 4
>
ãã4 5
(
ãã5 6
)
ãã6 7
;
ãã7 8
var
çç 
process
çç 
=
çç 
new
çç 
Process
çç 
{
éé 
	StartInfo
èè 
=
èè 
new
èè 
ProcessStartInfo
èè $
{
êê 
FileName
ëë 
=
ëë 
progpath
ëë 
,
ëë 
	Arguments
íí 
=
íí 
$str
íí 1
,
íí1 2
UseShellExecute
ìì 
=
ìì 
false
ìì 
,
ìì 
CreateNoWindow
îî 
=
îî 
true
îî 
,
îî $
RedirectStandardOutput
ïï 
=
ïï 
true
ïï "
,
ïï" ##
RedirectStandardError
ññ 
=
ññ 
true
ññ !
,
ññ! "
}
óó 
}
òò 
;
òò 
using
öö 
(
öö	 

process
öö
 
)
öö 
{
õõ 
var
úú 
json
úú 
=
úú 
string
úú 
.
úú 
Empty
úú 
;
úú 
process
ûû 
.
ûû  
OutputDataReceived
ûû 
+=
ûû !
(
ûû" #
o
ûû# $
,
ûû$ %
e
ûû& '
)
ûû' (
=>
ûû) +
json
ûû, 0
+=
ûû1 3
e
ûû4 5
.
ûû5 6
Data
ûû6 :
;
ûû: ;
process
üü 
.
üü 
Start
üü 
(
üü 
)
üü 
;
üü 
process
†† 
.
†† !
BeginOutputReadLine
†† 
(
††  
)
††  !
;
††! "
process
°° 
.
°° 
WaitForExit
°° 
(
°° 
)
°° 
;
°° 
var
££ 
result
££ 
=
££ 
VsWhereResult
££ 
.
££ 
FromJson
££ '
(
££' (
json
££( ,
)
££, -
;
££- .
return
§§ 

result
§§ 
.
§§ )
ToVisualStudioInstallations
§§ -
(
§§- .
)
§§. /
;
§§/ 0
}
•• 
}
¶¶ 
}
ßß 
}®® 